// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/OpticalFlow.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    module OpticalFlow_Constants {
      const uint8 MODE_UNKNOWN = 0;
      const uint8 MODE_BRIGHT = 1;
      const uint8 MODE_LOWLIGHT = 2;
      const uint8 MODE_SUPER_LOWLIGHT = 3;
    };
    @verbatim (language="comment", text=
      " Optical flow in XYZ body frame in SI units." "\n"
      " http://en.wikipedia.org/wiki/International_System_of_Units")
    struct OpticalFlow {
      @verbatim (language="comment", text=
        " time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        " id of the sensor emitting the flow value")
      uint8 sensor_id;

      @verbatim (language="comment", text=
        " accumulated optical flow in radians where a positive value is produced by a RH rotation about the X body axis")
      float pixel_flow_x_integral;

      @verbatim (language="comment", text=
        " accumulated optical flow in radians where a positive value is produced by a RH rotation about the Y body axis")
      float pixel_flow_y_integral;

      @verbatim (language="comment", text=
        " accumulated gyro value in radians where a positive value is produced by a RH rotation about the X body axis. Set to NaN if flow sensor does not have 3-axis gyro data.")
      float gyro_x_rate_integral;

      @verbatim (language="comment", text=
        " accumulated gyro value in radians where a positive value is produced by a RH rotation about the Y body axis. Set to NaN if flow sensor does not have 3-axis gyro data.")
      float gyro_y_rate_integral;

      @verbatim (language="comment", text=
        " accumulated gyro value in radians where a positive value is produced by a RH rotation about the Z body axis. Set to NaN if flow sensor does not have 3-axis gyro data.")
      float gyro_z_rate_integral;

      @verbatim (language="comment", text=
        " Altitude / distance to ground in meters")
      float ground_distance_m;

      @verbatim (language="comment", text=
        " accumulation timespan in microseconds")
      uint32 integration_timespan;

      @verbatim (language="comment", text=
        " time since last sonar update in microseconds")
      uint32 time_since_last_sonar_update;

      @verbatim (language="comment", text=
        " number of accumulated frames in timespan")
      uint16 frame_count_since_last_readout;

      @verbatim (language="comment", text=
        " Temperature * 100 in centi-degrees Celsius")
      int16 gyro_temperature;

      @verbatim (language="comment", text=
        " Average of quality of accumulated frames, 0: bad quality, 255: maximum quality")
      uint8 quality;

      @verbatim (language="comment", text=
        " Magnitude of maximum angular which the optical flow sensor can measure reliably")
      float max_flow_rate;

      @verbatim (language="comment", text=
        " Minimum distance from ground at which the optical flow sensor operates reliably")
      float min_ground_distance;

      @verbatim (language="comment", text=
        " Maximum distance from ground at which the optical flow sensor operates reliably")
      float max_ground_distance;

      uint8 mode;
    };
  };
};
