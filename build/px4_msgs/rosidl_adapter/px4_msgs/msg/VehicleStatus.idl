// generated from rosidl_adapter/resource/msg.idl.em
// with input from px4_msgs/msg/VehicleStatus.msg
// generated code does not contain a copyright notice


module px4_msgs {
  module msg {
    module VehicleStatus_Constants {
      const uint8 ARMING_STATE_INIT = 0;
      const uint8 ARMING_STATE_STANDBY = 1;
      const uint8 ARMING_STATE_ARMED = 2;
      const uint8 ARMING_STATE_STANDBY_ERROR = 3;
      const uint8 ARMING_STATE_SHUTDOWN = 4;
      const uint8 ARMING_STATE_IN_AIR_RESTORE = 5;
      const uint8 ARMING_STATE_MAX = 6;
      const uint8 FAILURE_NONE = 0;
      const uint8 FAILURE_ROLL = 1;
      const uint8 FAILURE_PITCH = 2;
      const uint8 FAILURE_ALT = 4;
      const uint8 FAILURE_EXT = 8;
      const uint8 FAILURE_ARM_ESC = 16;
      const uint8 FAILURE_HIGH_WIND = 32;
      const uint8 FAILURE_BATTERY = 64;
      const uint8 FAILURE_IMBALANCED_PROP = 128;
      const uint8 HIL_STATE_OFF = 0;
      const uint8 HIL_STATE_ON = 1;
      const uint8 NAVIGATION_STATE_MANUAL = 0;
      const uint8 NAVIGATION_STATE_ALTCTL = 1;
      const uint8 NAVIGATION_STATE_POSCTL = 2;
      const uint8 NAVIGATION_STATE_AUTO_MISSION = 3;
      const uint8 NAVIGATION_STATE_AUTO_LOITER = 4;
      const uint8 NAVIGATION_STATE_AUTO_RTL = 5;
      const uint8 NAVIGATION_STATE_AUTO_LANDENGFAIL = 8;
      const uint8 NAVIGATION_STATE_UNUSED = 9;
      const uint8 NAVIGATION_STATE_ACRO = 10;
      const uint8 NAVIGATION_STATE_UNUSED1 = 11;
      const uint8 NAVIGATION_STATE_DESCEND = 12;
      const uint8 NAVIGATION_STATE_TERMINATION = 13;
      const uint8 NAVIGATION_STATE_OFFBOARD = 14;
      const uint8 NAVIGATION_STATE_STAB = 15;
      const uint8 NAVIGATION_STATE_UNUSED2 = 16;
      const uint8 NAVIGATION_STATE_AUTO_TAKEOFF = 17;
      const uint8 NAVIGATION_STATE_AUTO_LAND = 18;
      const uint8 NAVIGATION_STATE_AUTO_FOLLOW_TARGET = 19;
      const uint8 NAVIGATION_STATE_AUTO_PRECLAND = 20;
      const uint8 NAVIGATION_STATE_ORBIT = 21;
      const uint8 NAVIGATION_STATE_AUTO_VTOL_TAKEOFF = 22;
      const uint8 NAVIGATION_STATE_MAX = 23;
      const uint8 VEHICLE_TYPE_UNKNOWN = 0;
      const uint8 VEHICLE_TYPE_ROTARY_WING = 1;
      const uint8 VEHICLE_TYPE_FIXED_WING = 2;
      const uint8 VEHICLE_TYPE_ROVER = 3;
      const uint8 VEHICLE_TYPE_AIRSHIP = 4;
      const uint8 ARM_DISARM_REASON_TRANSITION_TO_STANDBY = 0;
      const uint8 ARM_DISARM_REASON_RC_STICK = 1;
      const uint8 ARM_DISARM_REASON_RC_SWITCH = 2;
      const uint8 ARM_DISARM_REASON_COMMAND_INTERNAL = 3;
      const uint8 ARM_DISARM_REASON_COMMAND_EXTERNAL = 4;
      const uint8 ARM_DISARM_REASON_MISSION_START = 5;
      const uint8 ARM_DISARM_REASON_SAFETY_BUTTON = 6;
      const uint8 ARM_DISARM_REASON_AUTO_DISARM_LAND = 7;
      const uint8 ARM_DISARM_REASON_AUTO_DISARM_PREFLIGHT = 8;
      const uint8 ARM_DISARM_REASON_KILL_SWITCH = 9;
      const uint8 ARM_DISARM_REASON_LOCKDOWN = 10;
      const uint8 ARM_DISARM_REASON_FAILURE_DETECTOR = 11;
      const uint8 ARM_DISARM_REASON_SHUTDOWN = 12;
      const uint8 ARM_DISARM_REASON_UNIT_TEST = 13;
    };
    @verbatim (language="comment", text=
      " If you change the order, add or remove arming_state_t states make sure to update the arrays" "\n"
      " in state_machine_helper.cpp as well.")
    struct VehicleStatus {
      @verbatim (language="comment", text=
        " time since system start (microseconds)")
      uint64 timestamp;

      @verbatim (language="comment", text=
        " state machine / state of vehicle." "\n"
        " Encodes the complete system state and is set by the commander app." "\n"
        " set navigation state machine to specified value")
      uint8 nav_state;

      @verbatim (language="comment", text=
        " time when current nav_state activated")
      uint64 nav_state_timestamp;

      @verbatim (language="comment", text=
        " current arming state")
      uint8 arming_state;

      @verbatim (language="comment", text=
        " current hil state")
      uint8 hil_state;

      @verbatim (language="comment", text=
        " true if system is in failsafe state (e.g.:RTL, Hover, Terminate, ...)")
      boolean failsafe;

      @verbatim (language="comment", text=
        " time when failsafe was activated")
      uint64 failsafe_timestamp;

      @verbatim (language="comment", text=
        " system type, contains mavlink MAV_TYPE")
      uint8 system_type;

      @verbatim (language="comment", text=
        " system id, contains MAVLink's system ID field")
      uint8 system_id;

      @verbatim (language="comment", text=
        " subsystem / component id, contains MAVLink's component ID field")
      uint8 component_id;

      @verbatim (language="comment", text=
        " Type of vehicle (fixed-wing, rotary wing, ground)" "\n"
        " If the vehicle is a VTOL, then this value will be VEHICLE_TYPE_ROTARY_WING while flying as a multicopter," "\n"
        " and VEHICLE_TYPE_FIXED_WING when flying as a fixed-wing")
      uint8 vehicle_type;

      @verbatim (language="comment", text=
        " True if the system is VTOL capable")
      boolean is_vtol;

      @verbatim (language="comment", text=
        " True if the system performs a 90Â° pitch down rotation during transition from MC to FW")
      boolean is_vtol_tailsitter;

      @verbatim (language="comment", text=
        " True if VTOL should stabilize attitude for fw in manual mode")
      boolean vtol_fw_permanent_stab;

      @verbatim (language="comment", text=
        " True if VTOL is doing a transition")
      boolean in_transition_mode;

      @verbatim (language="comment", text=
        " True if VTOL is doing a transition from MC to FW")
      boolean in_transition_to_fw;

      @verbatim (language="comment", text=
        " true if RC reception lost")
      boolean rc_signal_lost;

      @verbatim (language="comment", text=
        " datalink to GCS lost")
      boolean data_link_lost;

      @verbatim (language="comment", text=
        " counts unique data link lost events")
      uint8 data_link_lost_counter;

      @verbatim (language="comment", text=
        " Set to true if the high latency data link (eg. RockBlock Iridium 9603 telemetry module) is lost")
      boolean high_latency_data_link_lost;

      @verbatim (language="comment", text=
        " Set to true if an engine failure is detected")
      boolean engine_failure;

      @verbatim (language="comment", text=
        " Set to true if mission could not continue/finish")
      boolean mission_failure;

      boolean geofence_violated;

      @verbatim (language="comment", text=
        " Bitmask containing FailureDetector status [0, 0, 0, 0, 0, FAILURE_ALT, FAILURE_PITCH, FAILURE_ROLL]")
      uint8 failure_detector_status;

      @verbatim (language="comment", text=
        " see SYS_STATUS mavlink message for the following" "\n"
        " lower 32 bits are for the base flags, higher 32 bits are or the extended flags")
      uint64 onboard_control_sensors_present;

      uint64 onboard_control_sensors_enabled;

      uint64 onboard_control_sensors_health;

      uint8 latest_arming_reason;

      uint8 latest_disarming_reason;

      @verbatim (language="comment", text=
        " Arming timestamp (microseconds)")
      uint64 armed_time;

      @verbatim (language="comment", text=
        " Takeoff timestamp (microseconds)")
      uint64 takeoff_time;
    };
  };
};
