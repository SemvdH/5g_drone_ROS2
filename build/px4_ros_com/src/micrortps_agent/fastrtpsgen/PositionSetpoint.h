// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PositionSetpoint.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_POSITIONSETPOINT_H_
#define _PX4_MSGS_MSG_POSITIONSETPOINT_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(PositionSetpoint_SOURCE)
#define PositionSetpoint_DllAPI __declspec( dllexport )
#else
#define PositionSetpoint_DllAPI __declspec( dllimport )
#endif // PositionSetpoint_SOURCE
#else
#define PositionSetpoint_DllAPI
#endif
#else
#define PositionSetpoint_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        namespace PositionSetpoint_Constants
        {
            const uint8_t SETPOINT_TYPE_POSITION = 0;
            const uint8_t SETPOINT_TYPE_VELOCITY = 1;
            const uint8_t SETPOINT_TYPE_LOITER = 2;
            const uint8_t SETPOINT_TYPE_TAKEOFF = 3;
            const uint8_t SETPOINT_TYPE_LAND = 4;
            const uint8_t SETPOINT_TYPE_IDLE = 5;
            const uint8_t SETPOINT_TYPE_FOLLOW_TARGET = 6;
            const uint8_t VELOCITY_FRAME_LOCAL_NED = 1;
            const uint8_t VELOCITY_FRAME_BODY_NED = 8;
        }
        /*!
         * @brief This class represents the structure PositionSetpoint defined by the user in the IDL file.
         * @ingroup POSITIONSETPOINT
         */
        class PositionSetpoint
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PositionSetpoint();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PositionSetpoint();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::PositionSetpoint that will be copied.
             */
            eProsima_user_DllExport PositionSetpoint(const PositionSetpoint &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::PositionSetpoint that will be copied.
             */
            eProsima_user_DllExport PositionSetpoint(PositionSetpoint &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::PositionSetpoint that will be copied.
             */
            eProsima_user_DllExport PositionSetpoint& operator=(const PositionSetpoint &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::PositionSetpoint that will be copied.
             */
            eProsima_user_DllExport PositionSetpoint& operator=(PositionSetpoint &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function sets a value in member valid
             * @param _valid New value for member valid
             */
            eProsima_user_DllExport void valid(bool _valid);

            /*!
             * @brief This function returns the value of member valid
             * @return Value of member valid
             */
            eProsima_user_DllExport bool valid() const;

            /*!
             * @brief This function returns a reference to member valid
             * @return Reference to member valid
             */
            eProsima_user_DllExport bool& valid();

            /*!
             * @brief This function sets a value in member type
             * @param _type New value for member type
             */
            eProsima_user_DllExport void type(uint8_t _type);

            /*!
             * @brief This function returns the value of member type
             * @return Value of member type
             */
            eProsima_user_DllExport uint8_t type() const;

            /*!
             * @brief This function returns a reference to member type
             * @return Reference to member type
             */
            eProsima_user_DllExport uint8_t& type();

            /*!
             * @brief This function sets a value in member vx
             * @param _vx New value for member vx
             */
            eProsima_user_DllExport void vx(float _vx);

            /*!
             * @brief This function returns the value of member vx
             * @return Value of member vx
             */
            eProsima_user_DllExport float vx() const;

            /*!
             * @brief This function returns a reference to member vx
             * @return Reference to member vx
             */
            eProsima_user_DllExport float& vx();

            /*!
             * @brief This function sets a value in member vy
             * @param _vy New value for member vy
             */
            eProsima_user_DllExport void vy(float _vy);

            /*!
             * @brief This function returns the value of member vy
             * @return Value of member vy
             */
            eProsima_user_DllExport float vy() const;

            /*!
             * @brief This function returns a reference to member vy
             * @return Reference to member vy
             */
            eProsima_user_DllExport float& vy();

            /*!
             * @brief This function sets a value in member vz
             * @param _vz New value for member vz
             */
            eProsima_user_DllExport void vz(float _vz);

            /*!
             * @brief This function returns the value of member vz
             * @return Value of member vz
             */
            eProsima_user_DllExport float vz() const;

            /*!
             * @brief This function returns a reference to member vz
             * @return Reference to member vz
             */
            eProsima_user_DllExport float& vz();

            /*!
             * @brief This function sets a value in member velocity_valid
             * @param _velocity_valid New value for member velocity_valid
             */
            eProsima_user_DllExport void velocity_valid(bool _velocity_valid);

            /*!
             * @brief This function returns the value of member velocity_valid
             * @return Value of member velocity_valid
             */
            eProsima_user_DllExport bool velocity_valid() const;

            /*!
             * @brief This function returns a reference to member velocity_valid
             * @return Reference to member velocity_valid
             */
            eProsima_user_DllExport bool& velocity_valid();

            /*!
             * @brief This function sets a value in member velocity_frame
             * @param _velocity_frame New value for member velocity_frame
             */
            eProsima_user_DllExport void velocity_frame(uint8_t _velocity_frame);

            /*!
             * @brief This function returns the value of member velocity_frame
             * @return Value of member velocity_frame
             */
            eProsima_user_DllExport uint8_t velocity_frame() const;

            /*!
             * @brief This function returns a reference to member velocity_frame
             * @return Reference to member velocity_frame
             */
            eProsima_user_DllExport uint8_t& velocity_frame();

            /*!
             * @brief This function sets a value in member alt_valid
             * @param _alt_valid New value for member alt_valid
             */
            eProsima_user_DllExport void alt_valid(bool _alt_valid);

            /*!
             * @brief This function returns the value of member alt_valid
             * @return Value of member alt_valid
             */
            eProsima_user_DllExport bool alt_valid() const;

            /*!
             * @brief This function returns a reference to member alt_valid
             * @return Reference to member alt_valid
             */
            eProsima_user_DllExport bool& alt_valid();

            /*!
             * @brief This function sets a value in member lat
             * @param _lat New value for member lat
             */
            eProsima_user_DllExport void lat(double _lat);

            /*!
             * @brief This function returns the value of member lat
             * @return Value of member lat
             */
            eProsima_user_DllExport double lat() const;

            /*!
             * @brief This function returns a reference to member lat
             * @return Reference to member lat
             */
            eProsima_user_DllExport double& lat();

            /*!
             * @brief This function sets a value in member lon
             * @param _lon New value for member lon
             */
            eProsima_user_DllExport void lon(double _lon);

            /*!
             * @brief This function returns the value of member lon
             * @return Value of member lon
             */
            eProsima_user_DllExport double lon() const;

            /*!
             * @brief This function returns a reference to member lon
             * @return Reference to member lon
             */
            eProsima_user_DllExport double& lon();

            /*!
             * @brief This function sets a value in member alt
             * @param _alt New value for member alt
             */
            eProsima_user_DllExport void alt(float _alt);

            /*!
             * @brief This function returns the value of member alt
             * @return Value of member alt
             */
            eProsima_user_DllExport float alt() const;

            /*!
             * @brief This function returns a reference to member alt
             * @return Reference to member alt
             */
            eProsima_user_DllExport float& alt();

            /*!
             * @brief This function sets a value in member yaw
             * @param _yaw New value for member yaw
             */
            eProsima_user_DllExport void yaw(float _yaw);

            /*!
             * @brief This function returns the value of member yaw
             * @return Value of member yaw
             */
            eProsima_user_DllExport float yaw() const;

            /*!
             * @brief This function returns a reference to member yaw
             * @return Reference to member yaw
             */
            eProsima_user_DllExport float& yaw();

            /*!
             * @brief This function sets a value in member yaw_valid
             * @param _yaw_valid New value for member yaw_valid
             */
            eProsima_user_DllExport void yaw_valid(bool _yaw_valid);

            /*!
             * @brief This function returns the value of member yaw_valid
             * @return Value of member yaw_valid
             */
            eProsima_user_DllExport bool yaw_valid() const;

            /*!
             * @brief This function returns a reference to member yaw_valid
             * @return Reference to member yaw_valid
             */
            eProsima_user_DllExport bool& yaw_valid();

            /*!
             * @brief This function sets a value in member yawspeed
             * @param _yawspeed New value for member yawspeed
             */
            eProsima_user_DllExport void yawspeed(float _yawspeed);

            /*!
             * @brief This function returns the value of member yawspeed
             * @return Value of member yawspeed
             */
            eProsima_user_DllExport float yawspeed() const;

            /*!
             * @brief This function returns a reference to member yawspeed
             * @return Reference to member yawspeed
             */
            eProsima_user_DllExport float& yawspeed();

            /*!
             * @brief This function sets a value in member yawspeed_valid
             * @param _yawspeed_valid New value for member yawspeed_valid
             */
            eProsima_user_DllExport void yawspeed_valid(bool _yawspeed_valid);

            /*!
             * @brief This function returns the value of member yawspeed_valid
             * @return Value of member yawspeed_valid
             */
            eProsima_user_DllExport bool yawspeed_valid() const;

            /*!
             * @brief This function returns a reference to member yawspeed_valid
             * @return Reference to member yawspeed_valid
             */
            eProsima_user_DllExport bool& yawspeed_valid();

            /*!
             * @brief This function sets a value in member landing_gear
             * @param _landing_gear New value for member landing_gear
             */
            eProsima_user_DllExport void landing_gear(int8_t _landing_gear);

            /*!
             * @brief This function returns the value of member landing_gear
             * @return Value of member landing_gear
             */
            eProsima_user_DllExport int8_t landing_gear() const;

            /*!
             * @brief This function returns a reference to member landing_gear
             * @return Reference to member landing_gear
             */
            eProsima_user_DllExport int8_t& landing_gear();

            /*!
             * @brief This function sets a value in member loiter_radius
             * @param _loiter_radius New value for member loiter_radius
             */
            eProsima_user_DllExport void loiter_radius(float _loiter_radius);

            /*!
             * @brief This function returns the value of member loiter_radius
             * @return Value of member loiter_radius
             */
            eProsima_user_DllExport float loiter_radius() const;

            /*!
             * @brief This function returns a reference to member loiter_radius
             * @return Reference to member loiter_radius
             */
            eProsima_user_DllExport float& loiter_radius();

            /*!
             * @brief This function sets a value in member loiter_direction
             * @param _loiter_direction New value for member loiter_direction
             */
            eProsima_user_DllExport void loiter_direction(int8_t _loiter_direction);

            /*!
             * @brief This function returns the value of member loiter_direction
             * @return Value of member loiter_direction
             */
            eProsima_user_DllExport int8_t loiter_direction() const;

            /*!
             * @brief This function returns a reference to member loiter_direction
             * @return Reference to member loiter_direction
             */
            eProsima_user_DllExport int8_t& loiter_direction();

            /*!
             * @brief This function sets a value in member acceptance_radius
             * @param _acceptance_radius New value for member acceptance_radius
             */
            eProsima_user_DllExport void acceptance_radius(float _acceptance_radius);

            /*!
             * @brief This function returns the value of member acceptance_radius
             * @return Value of member acceptance_radius
             */
            eProsima_user_DllExport float acceptance_radius() const;

            /*!
             * @brief This function returns a reference to member acceptance_radius
             * @return Reference to member acceptance_radius
             */
            eProsima_user_DllExport float& acceptance_radius();

            /*!
             * @brief This function sets a value in member cruising_speed
             * @param _cruising_speed New value for member cruising_speed
             */
            eProsima_user_DllExport void cruising_speed(float _cruising_speed);

            /*!
             * @brief This function returns the value of member cruising_speed
             * @return Value of member cruising_speed
             */
            eProsima_user_DllExport float cruising_speed() const;

            /*!
             * @brief This function returns a reference to member cruising_speed
             * @return Reference to member cruising_speed
             */
            eProsima_user_DllExport float& cruising_speed();

            /*!
             * @brief This function sets a value in member cruising_throttle
             * @param _cruising_throttle New value for member cruising_throttle
             */
            eProsima_user_DllExport void cruising_throttle(float _cruising_throttle);

            /*!
             * @brief This function returns the value of member cruising_throttle
             * @return Value of member cruising_throttle
             */
            eProsima_user_DllExport float cruising_throttle() const;

            /*!
             * @brief This function returns a reference to member cruising_throttle
             * @return Reference to member cruising_throttle
             */
            eProsima_user_DllExport float& cruising_throttle();

            /*!
             * @brief This function sets a value in member disable_weather_vane
             * @param _disable_weather_vane New value for member disable_weather_vane
             */
            eProsima_user_DllExport void disable_weather_vane(bool _disable_weather_vane);

            /*!
             * @brief This function returns the value of member disable_weather_vane
             * @return Value of member disable_weather_vane
             */
            eProsima_user_DllExport bool disable_weather_vane() const;

            /*!
             * @brief This function returns a reference to member disable_weather_vane
             * @return Reference to member disable_weather_vane
             */
            eProsima_user_DllExport bool& disable_weather_vane();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::PositionSetpoint& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            bool m_valid;
            uint8_t m_type;
            float m_vx;
            float m_vy;
            float m_vz;
            bool m_velocity_valid;
            uint8_t m_velocity_frame;
            bool m_alt_valid;
            double m_lat;
            double m_lon;
            float m_alt;
            float m_yaw;
            bool m_yaw_valid;
            float m_yawspeed;
            bool m_yawspeed_valid;
            int8_t m_landing_gear;
            float m_loiter_radius;
            int8_t m_loiter_direction;
            float m_acceptance_radius;
            float m_cruising_speed;
            float m_cruising_throttle;
            bool m_disable_weather_vane;
        };
    }
}

#endif // _PX4_MSGS_MSG_POSITIONSETPOINT_H_