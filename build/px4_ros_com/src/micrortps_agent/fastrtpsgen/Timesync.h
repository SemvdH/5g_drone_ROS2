// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Timesync.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_TIMESYNC_H_
#define _PX4_MSGS_MSG_TIMESYNC_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Timesync_SOURCE)
#define Timesync_DllAPI __declspec( dllexport )
#else
#define Timesync_DllAPI __declspec( dllimport )
#endif // Timesync_SOURCE
#else
#define Timesync_DllAPI
#endif
#else
#define Timesync_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        /*!
         * @brief This class represents the structure Timesync defined by the user in the IDL file.
         * @ingroup TIMESYNC
         */
        class Timesync
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport Timesync();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~Timesync();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::Timesync that will be copied.
             */
            eProsima_user_DllExport Timesync(const Timesync &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::Timesync that will be copied.
             */
            eProsima_user_DllExport Timesync(Timesync &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::Timesync that will be copied.
             */
            eProsima_user_DllExport Timesync& operator=(const Timesync &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::Timesync that will be copied.
             */
            eProsima_user_DllExport Timesync& operator=(Timesync &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function sets a value in member seq
             * @param _seq New value for member seq
             */
            eProsima_user_DllExport void seq(uint8_t _seq);

            /*!
             * @brief This function returns the value of member seq
             * @return Value of member seq
             */
            eProsima_user_DllExport uint8_t seq() const;

            /*!
             * @brief This function returns a reference to member seq
             * @return Reference to member seq
             */
            eProsima_user_DllExport uint8_t& seq();

            /*!
             * @brief This function sets a value in member tc1
             * @param _tc1 New value for member tc1
             */
            eProsima_user_DllExport void tc1(int64_t _tc1);

            /*!
             * @brief This function returns the value of member tc1
             * @return Value of member tc1
             */
            eProsima_user_DllExport int64_t tc1() const;

            /*!
             * @brief This function returns a reference to member tc1
             * @return Reference to member tc1
             */
            eProsima_user_DllExport int64_t& tc1();

            /*!
             * @brief This function sets a value in member ts1
             * @param _ts1 New value for member ts1
             */
            eProsima_user_DllExport void ts1(int64_t _ts1);

            /*!
             * @brief This function returns the value of member ts1
             * @return Value of member ts1
             */
            eProsima_user_DllExport int64_t ts1() const;

            /*!
             * @brief This function returns a reference to member ts1
             * @return Reference to member ts1
             */
            eProsima_user_DllExport int64_t& ts1();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::Timesync& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            uint8_t m_seq;
            int64_t m_tc1;
            int64_t m_ts1;
        };
    }
}

#endif // _PX4_MSGS_MSG_TIMESYNC_H_