// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleControlMode.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_VEHICLECONTROLMODE_H_
#define _PX4_MSGS_MSG_VEHICLECONTROLMODE_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VehicleControlMode_SOURCE)
#define VehicleControlMode_DllAPI __declspec( dllexport )
#else
#define VehicleControlMode_DllAPI __declspec( dllimport )
#endif // VehicleControlMode_SOURCE
#else
#define VehicleControlMode_DllAPI
#endif
#else
#define VehicleControlMode_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        /*!
         * @brief This class represents the structure VehicleControlMode defined by the user in the IDL file.
         * @ingroup VEHICLECONTROLMODE
         */
        class VehicleControlMode
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport VehicleControlMode();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~VehicleControlMode();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::VehicleControlMode that will be copied.
             */
            eProsima_user_DllExport VehicleControlMode(const VehicleControlMode &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::VehicleControlMode that will be copied.
             */
            eProsima_user_DllExport VehicleControlMode(VehicleControlMode &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::VehicleControlMode that will be copied.
             */
            eProsima_user_DllExport VehicleControlMode& operator=(const VehicleControlMode &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::VehicleControlMode that will be copied.
             */
            eProsima_user_DllExport VehicleControlMode& operator=(VehicleControlMode &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function sets a value in member flag_armed
             * @param _flag_armed New value for member flag_armed
             */
            eProsima_user_DllExport void flag_armed(bool _flag_armed);

            /*!
             * @brief This function returns the value of member flag_armed
             * @return Value of member flag_armed
             */
            eProsima_user_DllExport bool flag_armed() const;

            /*!
             * @brief This function returns a reference to member flag_armed
             * @return Reference to member flag_armed
             */
            eProsima_user_DllExport bool& flag_armed();

            /*!
             * @brief This function sets a value in member flag_multicopter_position_control_enabled
             * @param _flag_multicopter_position_control_enabled New value for member flag_multicopter_position_control_enabled
             */
            eProsima_user_DllExport void flag_multicopter_position_control_enabled(bool _flag_multicopter_position_control_enabled);

            /*!
             * @brief This function returns the value of member flag_multicopter_position_control_enabled
             * @return Value of member flag_multicopter_position_control_enabled
             */
            eProsima_user_DllExport bool flag_multicopter_position_control_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_multicopter_position_control_enabled
             * @return Reference to member flag_multicopter_position_control_enabled
             */
            eProsima_user_DllExport bool& flag_multicopter_position_control_enabled();

            /*!
             * @brief This function sets a value in member flag_control_manual_enabled
             * @param _flag_control_manual_enabled New value for member flag_control_manual_enabled
             */
            eProsima_user_DllExport void flag_control_manual_enabled(bool _flag_control_manual_enabled);

            /*!
             * @brief This function returns the value of member flag_control_manual_enabled
             * @return Value of member flag_control_manual_enabled
             */
            eProsima_user_DllExport bool flag_control_manual_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_manual_enabled
             * @return Reference to member flag_control_manual_enabled
             */
            eProsima_user_DllExport bool& flag_control_manual_enabled();

            /*!
             * @brief This function sets a value in member flag_control_auto_enabled
             * @param _flag_control_auto_enabled New value for member flag_control_auto_enabled
             */
            eProsima_user_DllExport void flag_control_auto_enabled(bool _flag_control_auto_enabled);

            /*!
             * @brief This function returns the value of member flag_control_auto_enabled
             * @return Value of member flag_control_auto_enabled
             */
            eProsima_user_DllExport bool flag_control_auto_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_auto_enabled
             * @return Reference to member flag_control_auto_enabled
             */
            eProsima_user_DllExport bool& flag_control_auto_enabled();

            /*!
             * @brief This function sets a value in member flag_control_offboard_enabled
             * @param _flag_control_offboard_enabled New value for member flag_control_offboard_enabled
             */
            eProsima_user_DllExport void flag_control_offboard_enabled(bool _flag_control_offboard_enabled);

            /*!
             * @brief This function returns the value of member flag_control_offboard_enabled
             * @return Value of member flag_control_offboard_enabled
             */
            eProsima_user_DllExport bool flag_control_offboard_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_offboard_enabled
             * @return Reference to member flag_control_offboard_enabled
             */
            eProsima_user_DllExport bool& flag_control_offboard_enabled();

            /*!
             * @brief This function sets a value in member flag_control_rates_enabled
             * @param _flag_control_rates_enabled New value for member flag_control_rates_enabled
             */
            eProsima_user_DllExport void flag_control_rates_enabled(bool _flag_control_rates_enabled);

            /*!
             * @brief This function returns the value of member flag_control_rates_enabled
             * @return Value of member flag_control_rates_enabled
             */
            eProsima_user_DllExport bool flag_control_rates_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_rates_enabled
             * @return Reference to member flag_control_rates_enabled
             */
            eProsima_user_DllExport bool& flag_control_rates_enabled();

            /*!
             * @brief This function sets a value in member flag_control_attitude_enabled
             * @param _flag_control_attitude_enabled New value for member flag_control_attitude_enabled
             */
            eProsima_user_DllExport void flag_control_attitude_enabled(bool _flag_control_attitude_enabled);

            /*!
             * @brief This function returns the value of member flag_control_attitude_enabled
             * @return Value of member flag_control_attitude_enabled
             */
            eProsima_user_DllExport bool flag_control_attitude_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_attitude_enabled
             * @return Reference to member flag_control_attitude_enabled
             */
            eProsima_user_DllExport bool& flag_control_attitude_enabled();

            /*!
             * @brief This function sets a value in member flag_control_acceleration_enabled
             * @param _flag_control_acceleration_enabled New value for member flag_control_acceleration_enabled
             */
            eProsima_user_DllExport void flag_control_acceleration_enabled(bool _flag_control_acceleration_enabled);

            /*!
             * @brief This function returns the value of member flag_control_acceleration_enabled
             * @return Value of member flag_control_acceleration_enabled
             */
            eProsima_user_DllExport bool flag_control_acceleration_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_acceleration_enabled
             * @return Reference to member flag_control_acceleration_enabled
             */
            eProsima_user_DllExport bool& flag_control_acceleration_enabled();

            /*!
             * @brief This function sets a value in member flag_control_velocity_enabled
             * @param _flag_control_velocity_enabled New value for member flag_control_velocity_enabled
             */
            eProsima_user_DllExport void flag_control_velocity_enabled(bool _flag_control_velocity_enabled);

            /*!
             * @brief This function returns the value of member flag_control_velocity_enabled
             * @return Value of member flag_control_velocity_enabled
             */
            eProsima_user_DllExport bool flag_control_velocity_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_velocity_enabled
             * @return Reference to member flag_control_velocity_enabled
             */
            eProsima_user_DllExport bool& flag_control_velocity_enabled();

            /*!
             * @brief This function sets a value in member flag_control_position_enabled
             * @param _flag_control_position_enabled New value for member flag_control_position_enabled
             */
            eProsima_user_DllExport void flag_control_position_enabled(bool _flag_control_position_enabled);

            /*!
             * @brief This function returns the value of member flag_control_position_enabled
             * @return Value of member flag_control_position_enabled
             */
            eProsima_user_DllExport bool flag_control_position_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_position_enabled
             * @return Reference to member flag_control_position_enabled
             */
            eProsima_user_DllExport bool& flag_control_position_enabled();

            /*!
             * @brief This function sets a value in member flag_control_altitude_enabled
             * @param _flag_control_altitude_enabled New value for member flag_control_altitude_enabled
             */
            eProsima_user_DllExport void flag_control_altitude_enabled(bool _flag_control_altitude_enabled);

            /*!
             * @brief This function returns the value of member flag_control_altitude_enabled
             * @return Value of member flag_control_altitude_enabled
             */
            eProsima_user_DllExport bool flag_control_altitude_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_altitude_enabled
             * @return Reference to member flag_control_altitude_enabled
             */
            eProsima_user_DllExport bool& flag_control_altitude_enabled();

            /*!
             * @brief This function sets a value in member flag_control_climb_rate_enabled
             * @param _flag_control_climb_rate_enabled New value for member flag_control_climb_rate_enabled
             */
            eProsima_user_DllExport void flag_control_climb_rate_enabled(bool _flag_control_climb_rate_enabled);

            /*!
             * @brief This function returns the value of member flag_control_climb_rate_enabled
             * @return Value of member flag_control_climb_rate_enabled
             */
            eProsima_user_DllExport bool flag_control_climb_rate_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_climb_rate_enabled
             * @return Reference to member flag_control_climb_rate_enabled
             */
            eProsima_user_DllExport bool& flag_control_climb_rate_enabled();

            /*!
             * @brief This function sets a value in member flag_control_termination_enabled
             * @param _flag_control_termination_enabled New value for member flag_control_termination_enabled
             */
            eProsima_user_DllExport void flag_control_termination_enabled(bool _flag_control_termination_enabled);

            /*!
             * @brief This function returns the value of member flag_control_termination_enabled
             * @return Value of member flag_control_termination_enabled
             */
            eProsima_user_DllExport bool flag_control_termination_enabled() const;

            /*!
             * @brief This function returns a reference to member flag_control_termination_enabled
             * @return Reference to member flag_control_termination_enabled
             */
            eProsima_user_DllExport bool& flag_control_termination_enabled();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::VehicleControlMode& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            bool m_flag_armed;
            bool m_flag_multicopter_position_control_enabled;
            bool m_flag_control_manual_enabled;
            bool m_flag_control_auto_enabled;
            bool m_flag_control_offboard_enabled;
            bool m_flag_control_rates_enabled;
            bool m_flag_control_attitude_enabled;
            bool m_flag_control_acceleration_enabled;
            bool m_flag_control_velocity_enabled;
            bool m_flag_control_position_enabled;
            bool m_flag_control_altitude_enabled;
            bool m_flag_control_climb_rate_enabled;
            bool m_flag_control_termination_enabled;
        };
    }
}

#endif // _PX4_MSGS_MSG_VEHICLECONTROLMODE_H_