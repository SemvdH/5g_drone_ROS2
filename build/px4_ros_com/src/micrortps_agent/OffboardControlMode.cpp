// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file OffboardControlMode.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "OffboardControlMode.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

px4_msgs::msg::OffboardControlMode::OffboardControlMode()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@158a8276
    m_timestamp = 0;
    // m_position com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3c3d9b6b
    m_position = false;
    // m_velocity com.eprosima.idl.parser.typecode.PrimitiveTypeCode@79d8407f
    m_velocity = false;
    // m_acceleration com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5fbe4146
    m_acceleration = false;
    // m_attitude com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1e66f1f5
    m_attitude = false;
    // m_body_rate com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4e50c791
    m_body_rate = false;
    // m_actuator com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7530ad9c
    m_actuator = false;

}

px4_msgs::msg::OffboardControlMode::~OffboardControlMode()
{







}

px4_msgs::msg::OffboardControlMode::OffboardControlMode(const OffboardControlMode &x)
{
    m_timestamp = x.m_timestamp;
    m_position = x.m_position;
    m_velocity = x.m_velocity;
    m_acceleration = x.m_acceleration;
    m_attitude = x.m_attitude;
    m_body_rate = x.m_body_rate;
    m_actuator = x.m_actuator;
}

px4_msgs::msg::OffboardControlMode::OffboardControlMode(OffboardControlMode &&x)
{
    m_timestamp = x.m_timestamp;
    m_position = x.m_position;
    m_velocity = x.m_velocity;
    m_acceleration = x.m_acceleration;
    m_attitude = x.m_attitude;
    m_body_rate = x.m_body_rate;
    m_actuator = x.m_actuator;
}

px4_msgs::msg::OffboardControlMode& px4_msgs::msg::OffboardControlMode::operator=(const OffboardControlMode &x)
{

    m_timestamp = x.m_timestamp;
    m_position = x.m_position;
    m_velocity = x.m_velocity;
    m_acceleration = x.m_acceleration;
    m_attitude = x.m_attitude;
    m_body_rate = x.m_body_rate;
    m_actuator = x.m_actuator;

    return *this;
}

px4_msgs::msg::OffboardControlMode& px4_msgs::msg::OffboardControlMode::operator=(OffboardControlMode &&x)
{

    m_timestamp = x.m_timestamp;
    m_position = x.m_position;
    m_velocity = x.m_velocity;
    m_acceleration = x.m_acceleration;
    m_attitude = x.m_attitude;
    m_body_rate = x.m_body_rate;
    m_actuator = x.m_actuator;

    return *this;
}

size_t px4_msgs::msg::OffboardControlMode::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::OffboardControlMode::getCdrSerializedSize(const px4_msgs::msg::OffboardControlMode& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::OffboardControlMode::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_position;
    scdr << m_velocity;
    scdr << m_acceleration;
    scdr << m_attitude;
    scdr << m_body_rate;
    scdr << m_actuator;
}

void px4_msgs::msg::OffboardControlMode::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_position;
    dcdr >> m_velocity;
    dcdr >> m_acceleration;
    dcdr >> m_attitude;
    dcdr >> m_body_rate;
    dcdr >> m_actuator;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::OffboardControlMode::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::OffboardControlMode::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::OffboardControlMode::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member position
 * @param _position New value for member position
 */
void px4_msgs::msg::OffboardControlMode::position(bool _position)
{
m_position = _position;
}

/*!
 * @brief This function returns the value of member position
 * @return Value of member position
 */
bool px4_msgs::msg::OffboardControlMode::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
bool& px4_msgs::msg::OffboardControlMode::position()
{
    return m_position;
}

/*!
 * @brief This function sets a value in member velocity
 * @param _velocity New value for member velocity
 */
void px4_msgs::msg::OffboardControlMode::velocity(bool _velocity)
{
m_velocity = _velocity;
}

/*!
 * @brief This function returns the value of member velocity
 * @return Value of member velocity
 */
bool px4_msgs::msg::OffboardControlMode::velocity() const
{
    return m_velocity;
}

/*!
 * @brief This function returns a reference to member velocity
 * @return Reference to member velocity
 */
bool& px4_msgs::msg::OffboardControlMode::velocity()
{
    return m_velocity;
}

/*!
 * @brief This function sets a value in member acceleration
 * @param _acceleration New value for member acceleration
 */
void px4_msgs::msg::OffboardControlMode::acceleration(bool _acceleration)
{
m_acceleration = _acceleration;
}

/*!
 * @brief This function returns the value of member acceleration
 * @return Value of member acceleration
 */
bool px4_msgs::msg::OffboardControlMode::acceleration() const
{
    return m_acceleration;
}

/*!
 * @brief This function returns a reference to member acceleration
 * @return Reference to member acceleration
 */
bool& px4_msgs::msg::OffboardControlMode::acceleration()
{
    return m_acceleration;
}

/*!
 * @brief This function sets a value in member attitude
 * @param _attitude New value for member attitude
 */
void px4_msgs::msg::OffboardControlMode::attitude(bool _attitude)
{
m_attitude = _attitude;
}

/*!
 * @brief This function returns the value of member attitude
 * @return Value of member attitude
 */
bool px4_msgs::msg::OffboardControlMode::attitude() const
{
    return m_attitude;
}

/*!
 * @brief This function returns a reference to member attitude
 * @return Reference to member attitude
 */
bool& px4_msgs::msg::OffboardControlMode::attitude()
{
    return m_attitude;
}

/*!
 * @brief This function sets a value in member body_rate
 * @param _body_rate New value for member body_rate
 */
void px4_msgs::msg::OffboardControlMode::body_rate(bool _body_rate)
{
m_body_rate = _body_rate;
}

/*!
 * @brief This function returns the value of member body_rate
 * @return Value of member body_rate
 */
bool px4_msgs::msg::OffboardControlMode::body_rate() const
{
    return m_body_rate;
}

/*!
 * @brief This function returns a reference to member body_rate
 * @return Reference to member body_rate
 */
bool& px4_msgs::msg::OffboardControlMode::body_rate()
{
    return m_body_rate;
}

/*!
 * @brief This function sets a value in member actuator
 * @param _actuator New value for member actuator
 */
void px4_msgs::msg::OffboardControlMode::actuator(bool _actuator)
{
m_actuator = _actuator;
}

/*!
 * @brief This function returns the value of member actuator
 * @return Value of member actuator
 */
bool px4_msgs::msg::OffboardControlMode::actuator() const
{
    return m_actuator;
}

/*!
 * @brief This function returns a reference to member actuator
 * @return Reference to member actuator
 */
bool& px4_msgs::msg::OffboardControlMode::actuator()
{
    return m_actuator;
}


size_t px4_msgs::msg::OffboardControlMode::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;










    return current_align;
}

bool px4_msgs::msg::OffboardControlMode::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::OffboardControlMode::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
}


