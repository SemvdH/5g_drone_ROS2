// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleStatus.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_VEHICLESTATUS_H_
#define _PX4_MSGS_MSG_VEHICLESTATUS_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VehicleStatus_SOURCE)
#define VehicleStatus_DllAPI __declspec( dllexport )
#else
#define VehicleStatus_DllAPI __declspec( dllimport )
#endif // VehicleStatus_SOURCE
#else
#define VehicleStatus_DllAPI
#endif
#else
#define VehicleStatus_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        namespace VehicleStatus_Constants
        {
            const uint8_t ARMING_STATE_INIT = 0;
            const uint8_t ARMING_STATE_STANDBY = 1;
            const uint8_t ARMING_STATE_ARMED = 2;
            const uint8_t ARMING_STATE_STANDBY_ERROR = 3;
            const uint8_t ARMING_STATE_SHUTDOWN = 4;
            const uint8_t ARMING_STATE_IN_AIR_RESTORE = 5;
            const uint8_t ARMING_STATE_MAX = 6;
            const uint8_t FAILURE_NONE = 0;
            const uint8_t FAILURE_ROLL = 1;
            const uint8_t FAILURE_PITCH = 2;
            const uint8_t FAILURE_ALT = 4;
            const uint8_t FAILURE_EXT = 8;
            const uint8_t FAILURE_ARM_ESC = 16;
            const uint8_t FAILURE_HIGH_WIND = 32;
            const uint8_t FAILURE_BATTERY = 64;
            const uint8_t FAILURE_IMBALANCED_PROP = 128;
            const uint8_t HIL_STATE_OFF = 0;
            const uint8_t HIL_STATE_ON = 1;
            const uint8_t NAVIGATION_STATE_MANUAL = 0;
            const uint8_t NAVIGATION_STATE_ALTCTL = 1;
            const uint8_t NAVIGATION_STATE_POSCTL = 2;
            const uint8_t NAVIGATION_STATE_AUTO_MISSION = 3;
            const uint8_t NAVIGATION_STATE_AUTO_LOITER = 4;
            const uint8_t NAVIGATION_STATE_AUTO_RTL = 5;
            const uint8_t NAVIGATION_STATE_AUTO_LANDENGFAIL = 8;
            const uint8_t NAVIGATION_STATE_UNUSED = 9;
            const uint8_t NAVIGATION_STATE_ACRO = 10;
            const uint8_t NAVIGATION_STATE_UNUSED1 = 11;
            const uint8_t NAVIGATION_STATE_DESCEND = 12;
            const uint8_t NAVIGATION_STATE_TERMINATION = 13;
            const uint8_t NAVIGATION_STATE_OFFBOARD = 14;
            const uint8_t NAVIGATION_STATE_STAB = 15;
            const uint8_t NAVIGATION_STATE_UNUSED2 = 16;
            const uint8_t NAVIGATION_STATE_AUTO_TAKEOFF = 17;
            const uint8_t NAVIGATION_STATE_AUTO_LAND = 18;
            const uint8_t NAVIGATION_STATE_AUTO_FOLLOW_TARGET = 19;
            const uint8_t NAVIGATION_STATE_AUTO_PRECLAND = 20;
            const uint8_t NAVIGATION_STATE_ORBIT = 21;
            const uint8_t NAVIGATION_STATE_AUTO_VTOL_TAKEOFF = 22;
            const uint8_t NAVIGATION_STATE_MAX = 23;
            const uint8_t VEHICLE_TYPE_UNKNOWN = 0;
            const uint8_t VEHICLE_TYPE_ROTARY_WING = 1;
            const uint8_t VEHICLE_TYPE_FIXED_WING = 2;
            const uint8_t VEHICLE_TYPE_ROVER = 3;
            const uint8_t VEHICLE_TYPE_AIRSHIP = 4;
            const uint8_t ARM_DISARM_REASON_TRANSITION_TO_STANDBY = 0;
            const uint8_t ARM_DISARM_REASON_RC_STICK = 1;
            const uint8_t ARM_DISARM_REASON_RC_SWITCH = 2;
            const uint8_t ARM_DISARM_REASON_COMMAND_INTERNAL = 3;
            const uint8_t ARM_DISARM_REASON_COMMAND_EXTERNAL = 4;
            const uint8_t ARM_DISARM_REASON_MISSION_START = 5;
            const uint8_t ARM_DISARM_REASON_SAFETY_BUTTON = 6;
            const uint8_t ARM_DISARM_REASON_AUTO_DISARM_LAND = 7;
            const uint8_t ARM_DISARM_REASON_AUTO_DISARM_PREFLIGHT = 8;
            const uint8_t ARM_DISARM_REASON_KILL_SWITCH = 9;
            const uint8_t ARM_DISARM_REASON_LOCKDOWN = 10;
            const uint8_t ARM_DISARM_REASON_FAILURE_DETECTOR = 11;
            const uint8_t ARM_DISARM_REASON_SHUTDOWN = 12;
            const uint8_t ARM_DISARM_REASON_UNIT_TEST = 13;
        }
        /*!
         * @brief This class represents the structure VehicleStatus defined by the user in the IDL file.
         * @ingroup VEHICLESTATUS
         */
        class VehicleStatus
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport VehicleStatus();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~VehicleStatus();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::VehicleStatus that will be copied.
             */
            eProsima_user_DllExport VehicleStatus(const VehicleStatus &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::VehicleStatus that will be copied.
             */
            eProsima_user_DllExport VehicleStatus(VehicleStatus &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::VehicleStatus that will be copied.
             */
            eProsima_user_DllExport VehicleStatus& operator=(const VehicleStatus &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::VehicleStatus that will be copied.
             */
            eProsima_user_DllExport VehicleStatus& operator=(VehicleStatus &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function sets a value in member nav_state
             * @param _nav_state New value for member nav_state
             */
            eProsima_user_DllExport void nav_state(uint8_t _nav_state);

            /*!
             * @brief This function returns the value of member nav_state
             * @return Value of member nav_state
             */
            eProsima_user_DllExport uint8_t nav_state() const;

            /*!
             * @brief This function returns a reference to member nav_state
             * @return Reference to member nav_state
             */
            eProsima_user_DllExport uint8_t& nav_state();

            /*!
             * @brief This function sets a value in member nav_state_timestamp
             * @param _nav_state_timestamp New value for member nav_state_timestamp
             */
            eProsima_user_DllExport void nav_state_timestamp(uint64_t _nav_state_timestamp);

            /*!
             * @brief This function returns the value of member nav_state_timestamp
             * @return Value of member nav_state_timestamp
             */
            eProsima_user_DllExport uint64_t nav_state_timestamp() const;

            /*!
             * @brief This function returns a reference to member nav_state_timestamp
             * @return Reference to member nav_state_timestamp
             */
            eProsima_user_DllExport uint64_t& nav_state_timestamp();

            /*!
             * @brief This function sets a value in member arming_state
             * @param _arming_state New value for member arming_state
             */
            eProsima_user_DllExport void arming_state(uint8_t _arming_state);

            /*!
             * @brief This function returns the value of member arming_state
             * @return Value of member arming_state
             */
            eProsima_user_DllExport uint8_t arming_state() const;

            /*!
             * @brief This function returns a reference to member arming_state
             * @return Reference to member arming_state
             */
            eProsima_user_DllExport uint8_t& arming_state();

            /*!
             * @brief This function sets a value in member hil_state
             * @param _hil_state New value for member hil_state
             */
            eProsima_user_DllExport void hil_state(uint8_t _hil_state);

            /*!
             * @brief This function returns the value of member hil_state
             * @return Value of member hil_state
             */
            eProsima_user_DllExport uint8_t hil_state() const;

            /*!
             * @brief This function returns a reference to member hil_state
             * @return Reference to member hil_state
             */
            eProsima_user_DllExport uint8_t& hil_state();

            /*!
             * @brief This function sets a value in member failsafe
             * @param _failsafe New value for member failsafe
             */
            eProsima_user_DllExport void failsafe(bool _failsafe);

            /*!
             * @brief This function returns the value of member failsafe
             * @return Value of member failsafe
             */
            eProsima_user_DllExport bool failsafe() const;

            /*!
             * @brief This function returns a reference to member failsafe
             * @return Reference to member failsafe
             */
            eProsima_user_DllExport bool& failsafe();

            /*!
             * @brief This function sets a value in member failsafe_timestamp
             * @param _failsafe_timestamp New value for member failsafe_timestamp
             */
            eProsima_user_DllExport void failsafe_timestamp(uint64_t _failsafe_timestamp);

            /*!
             * @brief This function returns the value of member failsafe_timestamp
             * @return Value of member failsafe_timestamp
             */
            eProsima_user_DllExport uint64_t failsafe_timestamp() const;

            /*!
             * @brief This function returns a reference to member failsafe_timestamp
             * @return Reference to member failsafe_timestamp
             */
            eProsima_user_DllExport uint64_t& failsafe_timestamp();

            /*!
             * @brief This function sets a value in member system_type
             * @param _system_type New value for member system_type
             */
            eProsima_user_DllExport void system_type(uint8_t _system_type);

            /*!
             * @brief This function returns the value of member system_type
             * @return Value of member system_type
             */
            eProsima_user_DllExport uint8_t system_type() const;

            /*!
             * @brief This function returns a reference to member system_type
             * @return Reference to member system_type
             */
            eProsima_user_DllExport uint8_t& system_type();

            /*!
             * @brief This function sets a value in member system_id
             * @param _system_id New value for member system_id
             */
            eProsima_user_DllExport void system_id(uint8_t _system_id);

            /*!
             * @brief This function returns the value of member system_id
             * @return Value of member system_id
             */
            eProsima_user_DllExport uint8_t system_id() const;

            /*!
             * @brief This function returns a reference to member system_id
             * @return Reference to member system_id
             */
            eProsima_user_DllExport uint8_t& system_id();

            /*!
             * @brief This function sets a value in member component_id
             * @param _component_id New value for member component_id
             */
            eProsima_user_DllExport void component_id(uint8_t _component_id);

            /*!
             * @brief This function returns the value of member component_id
             * @return Value of member component_id
             */
            eProsima_user_DllExport uint8_t component_id() const;

            /*!
             * @brief This function returns a reference to member component_id
             * @return Reference to member component_id
             */
            eProsima_user_DllExport uint8_t& component_id();

            /*!
             * @brief This function sets a value in member vehicle_type
             * @param _vehicle_type New value for member vehicle_type
             */
            eProsima_user_DllExport void vehicle_type(uint8_t _vehicle_type);

            /*!
             * @brief This function returns the value of member vehicle_type
             * @return Value of member vehicle_type
             */
            eProsima_user_DllExport uint8_t vehicle_type() const;

            /*!
             * @brief This function returns a reference to member vehicle_type
             * @return Reference to member vehicle_type
             */
            eProsima_user_DllExport uint8_t& vehicle_type();

            /*!
             * @brief This function sets a value in member is_vtol
             * @param _is_vtol New value for member is_vtol
             */
            eProsima_user_DllExport void is_vtol(bool _is_vtol);

            /*!
             * @brief This function returns the value of member is_vtol
             * @return Value of member is_vtol
             */
            eProsima_user_DllExport bool is_vtol() const;

            /*!
             * @brief This function returns a reference to member is_vtol
             * @return Reference to member is_vtol
             */
            eProsima_user_DllExport bool& is_vtol();

            /*!
             * @brief This function sets a value in member is_vtol_tailsitter
             * @param _is_vtol_tailsitter New value for member is_vtol_tailsitter
             */
            eProsima_user_DllExport void is_vtol_tailsitter(bool _is_vtol_tailsitter);

            /*!
             * @brief This function returns the value of member is_vtol_tailsitter
             * @return Value of member is_vtol_tailsitter
             */
            eProsima_user_DllExport bool is_vtol_tailsitter() const;

            /*!
             * @brief This function returns a reference to member is_vtol_tailsitter
             * @return Reference to member is_vtol_tailsitter
             */
            eProsima_user_DllExport bool& is_vtol_tailsitter();

            /*!
             * @brief This function sets a value in member vtol_fw_permanent_stab
             * @param _vtol_fw_permanent_stab New value for member vtol_fw_permanent_stab
             */
            eProsima_user_DllExport void vtol_fw_permanent_stab(bool _vtol_fw_permanent_stab);

            /*!
             * @brief This function returns the value of member vtol_fw_permanent_stab
             * @return Value of member vtol_fw_permanent_stab
             */
            eProsima_user_DllExport bool vtol_fw_permanent_stab() const;

            /*!
             * @brief This function returns a reference to member vtol_fw_permanent_stab
             * @return Reference to member vtol_fw_permanent_stab
             */
            eProsima_user_DllExport bool& vtol_fw_permanent_stab();

            /*!
             * @brief This function sets a value in member in_transition_mode
             * @param _in_transition_mode New value for member in_transition_mode
             */
            eProsima_user_DllExport void in_transition_mode(bool _in_transition_mode);

            /*!
             * @brief This function returns the value of member in_transition_mode
             * @return Value of member in_transition_mode
             */
            eProsima_user_DllExport bool in_transition_mode() const;

            /*!
             * @brief This function returns a reference to member in_transition_mode
             * @return Reference to member in_transition_mode
             */
            eProsima_user_DllExport bool& in_transition_mode();

            /*!
             * @brief This function sets a value in member in_transition_to_fw
             * @param _in_transition_to_fw New value for member in_transition_to_fw
             */
            eProsima_user_DllExport void in_transition_to_fw(bool _in_transition_to_fw);

            /*!
             * @brief This function returns the value of member in_transition_to_fw
             * @return Value of member in_transition_to_fw
             */
            eProsima_user_DllExport bool in_transition_to_fw() const;

            /*!
             * @brief This function returns a reference to member in_transition_to_fw
             * @return Reference to member in_transition_to_fw
             */
            eProsima_user_DllExport bool& in_transition_to_fw();

            /*!
             * @brief This function sets a value in member rc_signal_lost
             * @param _rc_signal_lost New value for member rc_signal_lost
             */
            eProsima_user_DllExport void rc_signal_lost(bool _rc_signal_lost);

            /*!
             * @brief This function returns the value of member rc_signal_lost
             * @return Value of member rc_signal_lost
             */
            eProsima_user_DllExport bool rc_signal_lost() const;

            /*!
             * @brief This function returns a reference to member rc_signal_lost
             * @return Reference to member rc_signal_lost
             */
            eProsima_user_DllExport bool& rc_signal_lost();

            /*!
             * @brief This function sets a value in member data_link_lost
             * @param _data_link_lost New value for member data_link_lost
             */
            eProsima_user_DllExport void data_link_lost(bool _data_link_lost);

            /*!
             * @brief This function returns the value of member data_link_lost
             * @return Value of member data_link_lost
             */
            eProsima_user_DllExport bool data_link_lost() const;

            /*!
             * @brief This function returns a reference to member data_link_lost
             * @return Reference to member data_link_lost
             */
            eProsima_user_DllExport bool& data_link_lost();

            /*!
             * @brief This function sets a value in member data_link_lost_counter
             * @param _data_link_lost_counter New value for member data_link_lost_counter
             */
            eProsima_user_DllExport void data_link_lost_counter(uint8_t _data_link_lost_counter);

            /*!
             * @brief This function returns the value of member data_link_lost_counter
             * @return Value of member data_link_lost_counter
             */
            eProsima_user_DllExport uint8_t data_link_lost_counter() const;

            /*!
             * @brief This function returns a reference to member data_link_lost_counter
             * @return Reference to member data_link_lost_counter
             */
            eProsima_user_DllExport uint8_t& data_link_lost_counter();

            /*!
             * @brief This function sets a value in member high_latency_data_link_lost
             * @param _high_latency_data_link_lost New value for member high_latency_data_link_lost
             */
            eProsima_user_DllExport void high_latency_data_link_lost(bool _high_latency_data_link_lost);

            /*!
             * @brief This function returns the value of member high_latency_data_link_lost
             * @return Value of member high_latency_data_link_lost
             */
            eProsima_user_DllExport bool high_latency_data_link_lost() const;

            /*!
             * @brief This function returns a reference to member high_latency_data_link_lost
             * @return Reference to member high_latency_data_link_lost
             */
            eProsima_user_DllExport bool& high_latency_data_link_lost();

            /*!
             * @brief This function sets a value in member engine_failure
             * @param _engine_failure New value for member engine_failure
             */
            eProsima_user_DllExport void engine_failure(bool _engine_failure);

            /*!
             * @brief This function returns the value of member engine_failure
             * @return Value of member engine_failure
             */
            eProsima_user_DllExport bool engine_failure() const;

            /*!
             * @brief This function returns a reference to member engine_failure
             * @return Reference to member engine_failure
             */
            eProsima_user_DllExport bool& engine_failure();

            /*!
             * @brief This function sets a value in member mission_failure
             * @param _mission_failure New value for member mission_failure
             */
            eProsima_user_DllExport void mission_failure(bool _mission_failure);

            /*!
             * @brief This function returns the value of member mission_failure
             * @return Value of member mission_failure
             */
            eProsima_user_DllExport bool mission_failure() const;

            /*!
             * @brief This function returns a reference to member mission_failure
             * @return Reference to member mission_failure
             */
            eProsima_user_DllExport bool& mission_failure();

            /*!
             * @brief This function sets a value in member geofence_violated
             * @param _geofence_violated New value for member geofence_violated
             */
            eProsima_user_DllExport void geofence_violated(bool _geofence_violated);

            /*!
             * @brief This function returns the value of member geofence_violated
             * @return Value of member geofence_violated
             */
            eProsima_user_DllExport bool geofence_violated() const;

            /*!
             * @brief This function returns a reference to member geofence_violated
             * @return Reference to member geofence_violated
             */
            eProsima_user_DllExport bool& geofence_violated();

            /*!
             * @brief This function sets a value in member failure_detector_status
             * @param _failure_detector_status New value for member failure_detector_status
             */
            eProsima_user_DllExport void failure_detector_status(uint8_t _failure_detector_status);

            /*!
             * @brief This function returns the value of member failure_detector_status
             * @return Value of member failure_detector_status
             */
            eProsima_user_DllExport uint8_t failure_detector_status() const;

            /*!
             * @brief This function returns a reference to member failure_detector_status
             * @return Reference to member failure_detector_status
             */
            eProsima_user_DllExport uint8_t& failure_detector_status();

            /*!
             * @brief This function sets a value in member onboard_control_sensors_present
             * @param _onboard_control_sensors_present New value for member onboard_control_sensors_present
             */
            eProsima_user_DllExport void onboard_control_sensors_present(uint64_t _onboard_control_sensors_present);

            /*!
             * @brief This function returns the value of member onboard_control_sensors_present
             * @return Value of member onboard_control_sensors_present
             */
            eProsima_user_DllExport uint64_t onboard_control_sensors_present() const;

            /*!
             * @brief This function returns a reference to member onboard_control_sensors_present
             * @return Reference to member onboard_control_sensors_present
             */
            eProsima_user_DllExport uint64_t& onboard_control_sensors_present();

            /*!
             * @brief This function sets a value in member onboard_control_sensors_enabled
             * @param _onboard_control_sensors_enabled New value for member onboard_control_sensors_enabled
             */
            eProsima_user_DllExport void onboard_control_sensors_enabled(uint64_t _onboard_control_sensors_enabled);

            /*!
             * @brief This function returns the value of member onboard_control_sensors_enabled
             * @return Value of member onboard_control_sensors_enabled
             */
            eProsima_user_DllExport uint64_t onboard_control_sensors_enabled() const;

            /*!
             * @brief This function returns a reference to member onboard_control_sensors_enabled
             * @return Reference to member onboard_control_sensors_enabled
             */
            eProsima_user_DllExport uint64_t& onboard_control_sensors_enabled();

            /*!
             * @brief This function sets a value in member onboard_control_sensors_health
             * @param _onboard_control_sensors_health New value for member onboard_control_sensors_health
             */
            eProsima_user_DllExport void onboard_control_sensors_health(uint64_t _onboard_control_sensors_health);

            /*!
             * @brief This function returns the value of member onboard_control_sensors_health
             * @return Value of member onboard_control_sensors_health
             */
            eProsima_user_DllExport uint64_t onboard_control_sensors_health() const;

            /*!
             * @brief This function returns a reference to member onboard_control_sensors_health
             * @return Reference to member onboard_control_sensors_health
             */
            eProsima_user_DllExport uint64_t& onboard_control_sensors_health();

            /*!
             * @brief This function sets a value in member latest_arming_reason
             * @param _latest_arming_reason New value for member latest_arming_reason
             */
            eProsima_user_DllExport void latest_arming_reason(uint8_t _latest_arming_reason);

            /*!
             * @brief This function returns the value of member latest_arming_reason
             * @return Value of member latest_arming_reason
             */
            eProsima_user_DllExport uint8_t latest_arming_reason() const;

            /*!
             * @brief This function returns a reference to member latest_arming_reason
             * @return Reference to member latest_arming_reason
             */
            eProsima_user_DllExport uint8_t& latest_arming_reason();

            /*!
             * @brief This function sets a value in member latest_disarming_reason
             * @param _latest_disarming_reason New value for member latest_disarming_reason
             */
            eProsima_user_DllExport void latest_disarming_reason(uint8_t _latest_disarming_reason);

            /*!
             * @brief This function returns the value of member latest_disarming_reason
             * @return Value of member latest_disarming_reason
             */
            eProsima_user_DllExport uint8_t latest_disarming_reason() const;

            /*!
             * @brief This function returns a reference to member latest_disarming_reason
             * @return Reference to member latest_disarming_reason
             */
            eProsima_user_DllExport uint8_t& latest_disarming_reason();

            /*!
             * @brief This function sets a value in member armed_time
             * @param _armed_time New value for member armed_time
             */
            eProsima_user_DllExport void armed_time(uint64_t _armed_time);

            /*!
             * @brief This function returns the value of member armed_time
             * @return Value of member armed_time
             */
            eProsima_user_DllExport uint64_t armed_time() const;

            /*!
             * @brief This function returns a reference to member armed_time
             * @return Reference to member armed_time
             */
            eProsima_user_DllExport uint64_t& armed_time();

            /*!
             * @brief This function sets a value in member takeoff_time
             * @param _takeoff_time New value for member takeoff_time
             */
            eProsima_user_DllExport void takeoff_time(uint64_t _takeoff_time);

            /*!
             * @brief This function returns the value of member takeoff_time
             * @return Value of member takeoff_time
             */
            eProsima_user_DllExport uint64_t takeoff_time() const;

            /*!
             * @brief This function returns a reference to member takeoff_time
             * @return Reference to member takeoff_time
             */
            eProsima_user_DllExport uint64_t& takeoff_time();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::VehicleStatus& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            uint8_t m_nav_state;
            uint64_t m_nav_state_timestamp;
            uint8_t m_arming_state;
            uint8_t m_hil_state;
            bool m_failsafe;
            uint64_t m_failsafe_timestamp;
            uint8_t m_system_type;
            uint8_t m_system_id;
            uint8_t m_component_id;
            uint8_t m_vehicle_type;
            bool m_is_vtol;
            bool m_is_vtol_tailsitter;
            bool m_vtol_fw_permanent_stab;
            bool m_in_transition_mode;
            bool m_in_transition_to_fw;
            bool m_rc_signal_lost;
            bool m_data_link_lost;
            uint8_t m_data_link_lost_counter;
            bool m_high_latency_data_link_lost;
            bool m_engine_failure;
            bool m_mission_failure;
            bool m_geofence_violated;
            uint8_t m_failure_detector_status;
            uint64_t m_onboard_control_sensors_present;
            uint64_t m_onboard_control_sensors_enabled;
            uint64_t m_onboard_control_sensors_health;
            uint8_t m_latest_arming_reason;
            uint8_t m_latest_disarming_reason;
            uint64_t m_armed_time;
            uint64_t m_takeoff_time;
        };
    }
}

#endif // _PX4_MSGS_MSG_VEHICLESTATUS_H_