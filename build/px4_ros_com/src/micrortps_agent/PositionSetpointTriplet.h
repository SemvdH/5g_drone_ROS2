// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PositionSetpointTriplet.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_POSITIONSETPOINTTRIPLET_H_
#define _PX4_MSGS_MSG_POSITIONSETPOINTTRIPLET_H_

// TODO Poner en el contexto.
#include "PositionSetpoint.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(PositionSetpointTriplet_SOURCE)
#define PositionSetpointTriplet_DllAPI __declspec( dllexport )
#else
#define PositionSetpointTriplet_DllAPI __declspec( dllimport )
#endif // PositionSetpointTriplet_SOURCE
#else
#define PositionSetpointTriplet_DllAPI
#endif
#else
#define PositionSetpointTriplet_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        /*!
         * @brief This class represents the structure PositionSetpointTriplet defined by the user in the IDL file.
         * @ingroup POSITIONSETPOINTTRIPLET
         */
        class PositionSetpointTriplet
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport PositionSetpointTriplet();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~PositionSetpointTriplet();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::PositionSetpointTriplet that will be copied.
             */
            eProsima_user_DllExport PositionSetpointTriplet(const PositionSetpointTriplet &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::PositionSetpointTriplet that will be copied.
             */
            eProsima_user_DllExport PositionSetpointTriplet(PositionSetpointTriplet &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::PositionSetpointTriplet that will be copied.
             */
            eProsima_user_DllExport PositionSetpointTriplet& operator=(const PositionSetpointTriplet &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::PositionSetpointTriplet that will be copied.
             */
            eProsima_user_DllExport PositionSetpointTriplet& operator=(PositionSetpointTriplet &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function copies the value in member previous
             * @param _previous New value to be copied in member previous
             */
            eProsima_user_DllExport void previous(const px4_msgs::msg::PositionSetpoint &_previous);

            /*!
             * @brief This function moves the value in member previous
             * @param _previous New value to be moved in member previous
             */
            eProsima_user_DllExport void previous(px4_msgs::msg::PositionSetpoint &&_previous);

            /*!
             * @brief This function returns a constant reference to member previous
             * @return Constant reference to member previous
             */
            eProsima_user_DllExport const px4_msgs::msg::PositionSetpoint& previous() const;

            /*!
             * @brief This function returns a reference to member previous
             * @return Reference to member previous
             */
            eProsima_user_DllExport px4_msgs::msg::PositionSetpoint& previous();
            /*!
             * @brief This function copies the value in member current
             * @param _current New value to be copied in member current
             */
            eProsima_user_DllExport void current(const px4_msgs::msg::PositionSetpoint &_current);

            /*!
             * @brief This function moves the value in member current
             * @param _current New value to be moved in member current
             */
            eProsima_user_DllExport void current(px4_msgs::msg::PositionSetpoint &&_current);

            /*!
             * @brief This function returns a constant reference to member current
             * @return Constant reference to member current
             */
            eProsima_user_DllExport const px4_msgs::msg::PositionSetpoint& current() const;

            /*!
             * @brief This function returns a reference to member current
             * @return Reference to member current
             */
            eProsima_user_DllExport px4_msgs::msg::PositionSetpoint& current();
            /*!
             * @brief This function copies the value in member next
             * @param _next New value to be copied in member next
             */
            eProsima_user_DllExport void next(const px4_msgs::msg::PositionSetpoint &_next);

            /*!
             * @brief This function moves the value in member next
             * @param _next New value to be moved in member next
             */
            eProsima_user_DllExport void next(px4_msgs::msg::PositionSetpoint &&_next);

            /*!
             * @brief This function returns a constant reference to member next
             * @return Constant reference to member next
             */
            eProsima_user_DllExport const px4_msgs::msg::PositionSetpoint& next() const;

            /*!
             * @brief This function returns a reference to member next
             * @return Reference to member next
             */
            eProsima_user_DllExport px4_msgs::msg::PositionSetpoint& next();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::PositionSetpointTriplet& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            px4_msgs::msg::PositionSetpoint m_previous;
            px4_msgs::msg::PositionSetpoint m_current;
            px4_msgs::msg::PositionSetpoint m_next;
        };
    }
}

#endif // _PX4_MSGS_MSG_POSITIONSETPOINTTRIPLET_H_