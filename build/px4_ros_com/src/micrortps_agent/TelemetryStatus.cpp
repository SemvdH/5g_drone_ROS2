// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TelemetryStatus.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "TelemetryStatus.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>








px4_msgs::msg::TelemetryStatus::TelemetryStatus()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1018bde2
    m_timestamp = 0;
    // m_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@65b3f4a4
    m_type = 0;
    // m_mode com.eprosima.idl.parser.typecode.PrimitiveTypeCode@f2ff811
    m_mode = 0;
    // m_flow_control com.eprosima.idl.parser.typecode.PrimitiveTypeCode@568ff82
    m_flow_control = false;
    // m_forwarding com.eprosima.idl.parser.typecode.PrimitiveTypeCode@50caa560
    m_forwarding = false;
    // m_mavlink_v2 com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2a266d09
    m_mavlink_v2 = false;
    // m_ftp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5ab9e72c
    m_ftp = false;
    // m_streams com.eprosima.idl.parser.typecode.PrimitiveTypeCode@186f8716
    m_streams = 0;
    // m_data_rate com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d8bd0de
    m_data_rate = 0.0;
    // m_rate_multiplier com.eprosima.idl.parser.typecode.PrimitiveTypeCode@45ca843
    m_rate_multiplier = 0.0;
    // m_tx_rate_avg com.eprosima.idl.parser.typecode.PrimitiveTypeCode@11c9af63
    m_tx_rate_avg = 0.0;
    // m_tx_error_rate_avg com.eprosima.idl.parser.typecode.PrimitiveTypeCode@757acd7b
    m_tx_error_rate_avg = 0.0;
    // m_tx_message_count com.eprosima.idl.parser.typecode.PrimitiveTypeCode@36b4fe2a
    m_tx_message_count = 0;
    // m_tx_buffer_overruns com.eprosima.idl.parser.typecode.PrimitiveTypeCode@574b560f
    m_tx_buffer_overruns = 0;
    // m_rx_rate_avg com.eprosima.idl.parser.typecode.PrimitiveTypeCode@ba54932
    m_rx_rate_avg = 0.0;
    // m_rx_message_count com.eprosima.idl.parser.typecode.PrimitiveTypeCode@28975c28
    m_rx_message_count = 0;
    // m_rx_message_lost_count com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3943a2be
    m_rx_message_lost_count = 0;
    // m_rx_buffer_overruns com.eprosima.idl.parser.typecode.PrimitiveTypeCode@343570b7
    m_rx_buffer_overruns = 0;
    // m_rx_parse_errors com.eprosima.idl.parser.typecode.PrimitiveTypeCode@157853da
    m_rx_parse_errors = 0;
    // m_rx_packet_drop_count com.eprosima.idl.parser.typecode.PrimitiveTypeCode@71c3b41
    m_rx_packet_drop_count = 0;
    // m_rx_message_lost_rate com.eprosima.idl.parser.typecode.PrimitiveTypeCode@236e3f4e
    m_rx_message_lost_rate = 0.0;
    // m_heartbeat_type_antenna_tracker com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3cc1435c
    m_heartbeat_type_antenna_tracker = false;
    // m_heartbeat_type_gcs com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6bf0219d
    m_heartbeat_type_gcs = false;
    // m_heartbeat_type_onboard_controller com.eprosima.idl.parser.typecode.PrimitiveTypeCode@dd0c991
    m_heartbeat_type_onboard_controller = false;
    // m_heartbeat_type_gimbal com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5f16132a
    m_heartbeat_type_gimbal = false;
    // m_heartbeat_type_adsb com.eprosima.idl.parser.typecode.PrimitiveTypeCode@69fb6037
    m_heartbeat_type_adsb = false;
    // m_heartbeat_type_camera com.eprosima.idl.parser.typecode.PrimitiveTypeCode@36d585c
    m_heartbeat_type_camera = false;
    // m_heartbeat_type_parachute com.eprosima.idl.parser.typecode.PrimitiveTypeCode@87a85e1
    m_heartbeat_type_parachute = false;
    // m_heartbeat_component_telemetry_radio com.eprosima.idl.parser.typecode.PrimitiveTypeCode@671a5887
    m_heartbeat_component_telemetry_radio = false;
    // m_heartbeat_component_log com.eprosima.idl.parser.typecode.PrimitiveTypeCode@5552768b
    m_heartbeat_component_log = false;
    // m_heartbeat_component_osd com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3c947bc5
    m_heartbeat_component_osd = false;
    // m_heartbeat_component_obstacle_avoidance com.eprosima.idl.parser.typecode.PrimitiveTypeCode@609db43b
    m_heartbeat_component_obstacle_avoidance = false;
    // m_heartbeat_component_vio com.eprosima.idl.parser.typecode.PrimitiveTypeCode@55f616cf
    m_heartbeat_component_vio = false;
    // m_heartbeat_component_pairing_manager com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1356d4d4
    m_heartbeat_component_pairing_manager = false;
    // m_heartbeat_component_udp_bridge com.eprosima.idl.parser.typecode.PrimitiveTypeCode@c03cf28
    m_heartbeat_component_udp_bridge = false;
    // m_heartbeat_component_uart_bridge com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1329eff
    m_heartbeat_component_uart_bridge = false;
    // m_avoidance_system_healthy com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6497b078
    m_avoidance_system_healthy = false;
    // m_parachute_system_healthy com.eprosima.idl.parser.typecode.PrimitiveTypeCode@41c2284a
    m_parachute_system_healthy = false;

}

px4_msgs::msg::TelemetryStatus::~TelemetryStatus()
{






































}

px4_msgs::msg::TelemetryStatus::TelemetryStatus(const TelemetryStatus &x)
{
    m_timestamp = x.m_timestamp;
    m_type = x.m_type;
    m_mode = x.m_mode;
    m_flow_control = x.m_flow_control;
    m_forwarding = x.m_forwarding;
    m_mavlink_v2 = x.m_mavlink_v2;
    m_ftp = x.m_ftp;
    m_streams = x.m_streams;
    m_data_rate = x.m_data_rate;
    m_rate_multiplier = x.m_rate_multiplier;
    m_tx_rate_avg = x.m_tx_rate_avg;
    m_tx_error_rate_avg = x.m_tx_error_rate_avg;
    m_tx_message_count = x.m_tx_message_count;
    m_tx_buffer_overruns = x.m_tx_buffer_overruns;
    m_rx_rate_avg = x.m_rx_rate_avg;
    m_rx_message_count = x.m_rx_message_count;
    m_rx_message_lost_count = x.m_rx_message_lost_count;
    m_rx_buffer_overruns = x.m_rx_buffer_overruns;
    m_rx_parse_errors = x.m_rx_parse_errors;
    m_rx_packet_drop_count = x.m_rx_packet_drop_count;
    m_rx_message_lost_rate = x.m_rx_message_lost_rate;
    m_heartbeat_type_antenna_tracker = x.m_heartbeat_type_antenna_tracker;
    m_heartbeat_type_gcs = x.m_heartbeat_type_gcs;
    m_heartbeat_type_onboard_controller = x.m_heartbeat_type_onboard_controller;
    m_heartbeat_type_gimbal = x.m_heartbeat_type_gimbal;
    m_heartbeat_type_adsb = x.m_heartbeat_type_adsb;
    m_heartbeat_type_camera = x.m_heartbeat_type_camera;
    m_heartbeat_type_parachute = x.m_heartbeat_type_parachute;
    m_heartbeat_component_telemetry_radio = x.m_heartbeat_component_telemetry_radio;
    m_heartbeat_component_log = x.m_heartbeat_component_log;
    m_heartbeat_component_osd = x.m_heartbeat_component_osd;
    m_heartbeat_component_obstacle_avoidance = x.m_heartbeat_component_obstacle_avoidance;
    m_heartbeat_component_vio = x.m_heartbeat_component_vio;
    m_heartbeat_component_pairing_manager = x.m_heartbeat_component_pairing_manager;
    m_heartbeat_component_udp_bridge = x.m_heartbeat_component_udp_bridge;
    m_heartbeat_component_uart_bridge = x.m_heartbeat_component_uart_bridge;
    m_avoidance_system_healthy = x.m_avoidance_system_healthy;
    m_parachute_system_healthy = x.m_parachute_system_healthy;
}

px4_msgs::msg::TelemetryStatus::TelemetryStatus(TelemetryStatus &&x)
{
    m_timestamp = x.m_timestamp;
    m_type = x.m_type;
    m_mode = x.m_mode;
    m_flow_control = x.m_flow_control;
    m_forwarding = x.m_forwarding;
    m_mavlink_v2 = x.m_mavlink_v2;
    m_ftp = x.m_ftp;
    m_streams = x.m_streams;
    m_data_rate = x.m_data_rate;
    m_rate_multiplier = x.m_rate_multiplier;
    m_tx_rate_avg = x.m_tx_rate_avg;
    m_tx_error_rate_avg = x.m_tx_error_rate_avg;
    m_tx_message_count = x.m_tx_message_count;
    m_tx_buffer_overruns = x.m_tx_buffer_overruns;
    m_rx_rate_avg = x.m_rx_rate_avg;
    m_rx_message_count = x.m_rx_message_count;
    m_rx_message_lost_count = x.m_rx_message_lost_count;
    m_rx_buffer_overruns = x.m_rx_buffer_overruns;
    m_rx_parse_errors = x.m_rx_parse_errors;
    m_rx_packet_drop_count = x.m_rx_packet_drop_count;
    m_rx_message_lost_rate = x.m_rx_message_lost_rate;
    m_heartbeat_type_antenna_tracker = x.m_heartbeat_type_antenna_tracker;
    m_heartbeat_type_gcs = x.m_heartbeat_type_gcs;
    m_heartbeat_type_onboard_controller = x.m_heartbeat_type_onboard_controller;
    m_heartbeat_type_gimbal = x.m_heartbeat_type_gimbal;
    m_heartbeat_type_adsb = x.m_heartbeat_type_adsb;
    m_heartbeat_type_camera = x.m_heartbeat_type_camera;
    m_heartbeat_type_parachute = x.m_heartbeat_type_parachute;
    m_heartbeat_component_telemetry_radio = x.m_heartbeat_component_telemetry_radio;
    m_heartbeat_component_log = x.m_heartbeat_component_log;
    m_heartbeat_component_osd = x.m_heartbeat_component_osd;
    m_heartbeat_component_obstacle_avoidance = x.m_heartbeat_component_obstacle_avoidance;
    m_heartbeat_component_vio = x.m_heartbeat_component_vio;
    m_heartbeat_component_pairing_manager = x.m_heartbeat_component_pairing_manager;
    m_heartbeat_component_udp_bridge = x.m_heartbeat_component_udp_bridge;
    m_heartbeat_component_uart_bridge = x.m_heartbeat_component_uart_bridge;
    m_avoidance_system_healthy = x.m_avoidance_system_healthy;
    m_parachute_system_healthy = x.m_parachute_system_healthy;
}

px4_msgs::msg::TelemetryStatus& px4_msgs::msg::TelemetryStatus::operator=(const TelemetryStatus &x)
{

    m_timestamp = x.m_timestamp;
    m_type = x.m_type;
    m_mode = x.m_mode;
    m_flow_control = x.m_flow_control;
    m_forwarding = x.m_forwarding;
    m_mavlink_v2 = x.m_mavlink_v2;
    m_ftp = x.m_ftp;
    m_streams = x.m_streams;
    m_data_rate = x.m_data_rate;
    m_rate_multiplier = x.m_rate_multiplier;
    m_tx_rate_avg = x.m_tx_rate_avg;
    m_tx_error_rate_avg = x.m_tx_error_rate_avg;
    m_tx_message_count = x.m_tx_message_count;
    m_tx_buffer_overruns = x.m_tx_buffer_overruns;
    m_rx_rate_avg = x.m_rx_rate_avg;
    m_rx_message_count = x.m_rx_message_count;
    m_rx_message_lost_count = x.m_rx_message_lost_count;
    m_rx_buffer_overruns = x.m_rx_buffer_overruns;
    m_rx_parse_errors = x.m_rx_parse_errors;
    m_rx_packet_drop_count = x.m_rx_packet_drop_count;
    m_rx_message_lost_rate = x.m_rx_message_lost_rate;
    m_heartbeat_type_antenna_tracker = x.m_heartbeat_type_antenna_tracker;
    m_heartbeat_type_gcs = x.m_heartbeat_type_gcs;
    m_heartbeat_type_onboard_controller = x.m_heartbeat_type_onboard_controller;
    m_heartbeat_type_gimbal = x.m_heartbeat_type_gimbal;
    m_heartbeat_type_adsb = x.m_heartbeat_type_adsb;
    m_heartbeat_type_camera = x.m_heartbeat_type_camera;
    m_heartbeat_type_parachute = x.m_heartbeat_type_parachute;
    m_heartbeat_component_telemetry_radio = x.m_heartbeat_component_telemetry_radio;
    m_heartbeat_component_log = x.m_heartbeat_component_log;
    m_heartbeat_component_osd = x.m_heartbeat_component_osd;
    m_heartbeat_component_obstacle_avoidance = x.m_heartbeat_component_obstacle_avoidance;
    m_heartbeat_component_vio = x.m_heartbeat_component_vio;
    m_heartbeat_component_pairing_manager = x.m_heartbeat_component_pairing_manager;
    m_heartbeat_component_udp_bridge = x.m_heartbeat_component_udp_bridge;
    m_heartbeat_component_uart_bridge = x.m_heartbeat_component_uart_bridge;
    m_avoidance_system_healthy = x.m_avoidance_system_healthy;
    m_parachute_system_healthy = x.m_parachute_system_healthy;

    return *this;
}

px4_msgs::msg::TelemetryStatus& px4_msgs::msg::TelemetryStatus::operator=(TelemetryStatus &&x)
{

    m_timestamp = x.m_timestamp;
    m_type = x.m_type;
    m_mode = x.m_mode;
    m_flow_control = x.m_flow_control;
    m_forwarding = x.m_forwarding;
    m_mavlink_v2 = x.m_mavlink_v2;
    m_ftp = x.m_ftp;
    m_streams = x.m_streams;
    m_data_rate = x.m_data_rate;
    m_rate_multiplier = x.m_rate_multiplier;
    m_tx_rate_avg = x.m_tx_rate_avg;
    m_tx_error_rate_avg = x.m_tx_error_rate_avg;
    m_tx_message_count = x.m_tx_message_count;
    m_tx_buffer_overruns = x.m_tx_buffer_overruns;
    m_rx_rate_avg = x.m_rx_rate_avg;
    m_rx_message_count = x.m_rx_message_count;
    m_rx_message_lost_count = x.m_rx_message_lost_count;
    m_rx_buffer_overruns = x.m_rx_buffer_overruns;
    m_rx_parse_errors = x.m_rx_parse_errors;
    m_rx_packet_drop_count = x.m_rx_packet_drop_count;
    m_rx_message_lost_rate = x.m_rx_message_lost_rate;
    m_heartbeat_type_antenna_tracker = x.m_heartbeat_type_antenna_tracker;
    m_heartbeat_type_gcs = x.m_heartbeat_type_gcs;
    m_heartbeat_type_onboard_controller = x.m_heartbeat_type_onboard_controller;
    m_heartbeat_type_gimbal = x.m_heartbeat_type_gimbal;
    m_heartbeat_type_adsb = x.m_heartbeat_type_adsb;
    m_heartbeat_type_camera = x.m_heartbeat_type_camera;
    m_heartbeat_type_parachute = x.m_heartbeat_type_parachute;
    m_heartbeat_component_telemetry_radio = x.m_heartbeat_component_telemetry_radio;
    m_heartbeat_component_log = x.m_heartbeat_component_log;
    m_heartbeat_component_osd = x.m_heartbeat_component_osd;
    m_heartbeat_component_obstacle_avoidance = x.m_heartbeat_component_obstacle_avoidance;
    m_heartbeat_component_vio = x.m_heartbeat_component_vio;
    m_heartbeat_component_pairing_manager = x.m_heartbeat_component_pairing_manager;
    m_heartbeat_component_udp_bridge = x.m_heartbeat_component_udp_bridge;
    m_heartbeat_component_uart_bridge = x.m_heartbeat_component_uart_bridge;
    m_avoidance_system_healthy = x.m_avoidance_system_healthy;
    m_parachute_system_healthy = x.m_parachute_system_healthy;

    return *this;
}

size_t px4_msgs::msg::TelemetryStatus::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::TelemetryStatus::getCdrSerializedSize(const px4_msgs::msg::TelemetryStatus& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::TelemetryStatus::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_type;
    scdr << m_mode;
    scdr << m_flow_control;
    scdr << m_forwarding;
    scdr << m_mavlink_v2;
    scdr << m_ftp;
    scdr << m_streams;
    scdr << m_data_rate;
    scdr << m_rate_multiplier;
    scdr << m_tx_rate_avg;
    scdr << m_tx_error_rate_avg;
    scdr << m_tx_message_count;
    scdr << m_tx_buffer_overruns;
    scdr << m_rx_rate_avg;
    scdr << m_rx_message_count;
    scdr << m_rx_message_lost_count;
    scdr << m_rx_buffer_overruns;
    scdr << m_rx_parse_errors;
    scdr << m_rx_packet_drop_count;
    scdr << m_rx_message_lost_rate;
    scdr << m_heartbeat_type_antenna_tracker;
    scdr << m_heartbeat_type_gcs;
    scdr << m_heartbeat_type_onboard_controller;
    scdr << m_heartbeat_type_gimbal;
    scdr << m_heartbeat_type_adsb;
    scdr << m_heartbeat_type_camera;
    scdr << m_heartbeat_type_parachute;
    scdr << m_heartbeat_component_telemetry_radio;
    scdr << m_heartbeat_component_log;
    scdr << m_heartbeat_component_osd;
    scdr << m_heartbeat_component_obstacle_avoidance;
    scdr << m_heartbeat_component_vio;
    scdr << m_heartbeat_component_pairing_manager;
    scdr << m_heartbeat_component_udp_bridge;
    scdr << m_heartbeat_component_uart_bridge;
    scdr << m_avoidance_system_healthy;
    scdr << m_parachute_system_healthy;
}

void px4_msgs::msg::TelemetryStatus::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_type;
    dcdr >> m_mode;
    dcdr >> m_flow_control;
    dcdr >> m_forwarding;
    dcdr >> m_mavlink_v2;
    dcdr >> m_ftp;
    dcdr >> m_streams;
    dcdr >> m_data_rate;
    dcdr >> m_rate_multiplier;
    dcdr >> m_tx_rate_avg;
    dcdr >> m_tx_error_rate_avg;
    dcdr >> m_tx_message_count;
    dcdr >> m_tx_buffer_overruns;
    dcdr >> m_rx_rate_avg;
    dcdr >> m_rx_message_count;
    dcdr >> m_rx_message_lost_count;
    dcdr >> m_rx_buffer_overruns;
    dcdr >> m_rx_parse_errors;
    dcdr >> m_rx_packet_drop_count;
    dcdr >> m_rx_message_lost_rate;
    dcdr >> m_heartbeat_type_antenna_tracker;
    dcdr >> m_heartbeat_type_gcs;
    dcdr >> m_heartbeat_type_onboard_controller;
    dcdr >> m_heartbeat_type_gimbal;
    dcdr >> m_heartbeat_type_adsb;
    dcdr >> m_heartbeat_type_camera;
    dcdr >> m_heartbeat_type_parachute;
    dcdr >> m_heartbeat_component_telemetry_radio;
    dcdr >> m_heartbeat_component_log;
    dcdr >> m_heartbeat_component_osd;
    dcdr >> m_heartbeat_component_obstacle_avoidance;
    dcdr >> m_heartbeat_component_vio;
    dcdr >> m_heartbeat_component_pairing_manager;
    dcdr >> m_heartbeat_component_udp_bridge;
    dcdr >> m_heartbeat_component_uart_bridge;
    dcdr >> m_avoidance_system_healthy;
    dcdr >> m_parachute_system_healthy;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::TelemetryStatus::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::TelemetryStatus::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::TelemetryStatus::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void px4_msgs::msg::TelemetryStatus::type(uint8_t _type)
{
m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint8_t px4_msgs::msg::TelemetryStatus::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint8_t& px4_msgs::msg::TelemetryStatus::type()
{
    return m_type;
}

/*!
 * @brief This function sets a value in member mode
 * @param _mode New value for member mode
 */
void px4_msgs::msg::TelemetryStatus::mode(uint8_t _mode)
{
m_mode = _mode;
}

/*!
 * @brief This function returns the value of member mode
 * @return Value of member mode
 */
uint8_t px4_msgs::msg::TelemetryStatus::mode() const
{
    return m_mode;
}

/*!
 * @brief This function returns a reference to member mode
 * @return Reference to member mode
 */
uint8_t& px4_msgs::msg::TelemetryStatus::mode()
{
    return m_mode;
}

/*!
 * @brief This function sets a value in member flow_control
 * @param _flow_control New value for member flow_control
 */
void px4_msgs::msg::TelemetryStatus::flow_control(bool _flow_control)
{
m_flow_control = _flow_control;
}

/*!
 * @brief This function returns the value of member flow_control
 * @return Value of member flow_control
 */
bool px4_msgs::msg::TelemetryStatus::flow_control() const
{
    return m_flow_control;
}

/*!
 * @brief This function returns a reference to member flow_control
 * @return Reference to member flow_control
 */
bool& px4_msgs::msg::TelemetryStatus::flow_control()
{
    return m_flow_control;
}

/*!
 * @brief This function sets a value in member forwarding
 * @param _forwarding New value for member forwarding
 */
void px4_msgs::msg::TelemetryStatus::forwarding(bool _forwarding)
{
m_forwarding = _forwarding;
}

/*!
 * @brief This function returns the value of member forwarding
 * @return Value of member forwarding
 */
bool px4_msgs::msg::TelemetryStatus::forwarding() const
{
    return m_forwarding;
}

/*!
 * @brief This function returns a reference to member forwarding
 * @return Reference to member forwarding
 */
bool& px4_msgs::msg::TelemetryStatus::forwarding()
{
    return m_forwarding;
}

/*!
 * @brief This function sets a value in member mavlink_v2
 * @param _mavlink_v2 New value for member mavlink_v2
 */
void px4_msgs::msg::TelemetryStatus::mavlink_v2(bool _mavlink_v2)
{
m_mavlink_v2 = _mavlink_v2;
}

/*!
 * @brief This function returns the value of member mavlink_v2
 * @return Value of member mavlink_v2
 */
bool px4_msgs::msg::TelemetryStatus::mavlink_v2() const
{
    return m_mavlink_v2;
}

/*!
 * @brief This function returns a reference to member mavlink_v2
 * @return Reference to member mavlink_v2
 */
bool& px4_msgs::msg::TelemetryStatus::mavlink_v2()
{
    return m_mavlink_v2;
}

/*!
 * @brief This function sets a value in member ftp
 * @param _ftp New value for member ftp
 */
void px4_msgs::msg::TelemetryStatus::ftp(bool _ftp)
{
m_ftp = _ftp;
}

/*!
 * @brief This function returns the value of member ftp
 * @return Value of member ftp
 */
bool px4_msgs::msg::TelemetryStatus::ftp() const
{
    return m_ftp;
}

/*!
 * @brief This function returns a reference to member ftp
 * @return Reference to member ftp
 */
bool& px4_msgs::msg::TelemetryStatus::ftp()
{
    return m_ftp;
}

/*!
 * @brief This function sets a value in member streams
 * @param _streams New value for member streams
 */
void px4_msgs::msg::TelemetryStatus::streams(uint8_t _streams)
{
m_streams = _streams;
}

/*!
 * @brief This function returns the value of member streams
 * @return Value of member streams
 */
uint8_t px4_msgs::msg::TelemetryStatus::streams() const
{
    return m_streams;
}

/*!
 * @brief This function returns a reference to member streams
 * @return Reference to member streams
 */
uint8_t& px4_msgs::msg::TelemetryStatus::streams()
{
    return m_streams;
}

/*!
 * @brief This function sets a value in member data_rate
 * @param _data_rate New value for member data_rate
 */
void px4_msgs::msg::TelemetryStatus::data_rate(float _data_rate)
{
m_data_rate = _data_rate;
}

/*!
 * @brief This function returns the value of member data_rate
 * @return Value of member data_rate
 */
float px4_msgs::msg::TelemetryStatus::data_rate() const
{
    return m_data_rate;
}

/*!
 * @brief This function returns a reference to member data_rate
 * @return Reference to member data_rate
 */
float& px4_msgs::msg::TelemetryStatus::data_rate()
{
    return m_data_rate;
}

/*!
 * @brief This function sets a value in member rate_multiplier
 * @param _rate_multiplier New value for member rate_multiplier
 */
void px4_msgs::msg::TelemetryStatus::rate_multiplier(float _rate_multiplier)
{
m_rate_multiplier = _rate_multiplier;
}

/*!
 * @brief This function returns the value of member rate_multiplier
 * @return Value of member rate_multiplier
 */
float px4_msgs::msg::TelemetryStatus::rate_multiplier() const
{
    return m_rate_multiplier;
}

/*!
 * @brief This function returns a reference to member rate_multiplier
 * @return Reference to member rate_multiplier
 */
float& px4_msgs::msg::TelemetryStatus::rate_multiplier()
{
    return m_rate_multiplier;
}

/*!
 * @brief This function sets a value in member tx_rate_avg
 * @param _tx_rate_avg New value for member tx_rate_avg
 */
void px4_msgs::msg::TelemetryStatus::tx_rate_avg(float _tx_rate_avg)
{
m_tx_rate_avg = _tx_rate_avg;
}

/*!
 * @brief This function returns the value of member tx_rate_avg
 * @return Value of member tx_rate_avg
 */
float px4_msgs::msg::TelemetryStatus::tx_rate_avg() const
{
    return m_tx_rate_avg;
}

/*!
 * @brief This function returns a reference to member tx_rate_avg
 * @return Reference to member tx_rate_avg
 */
float& px4_msgs::msg::TelemetryStatus::tx_rate_avg()
{
    return m_tx_rate_avg;
}

/*!
 * @brief This function sets a value in member tx_error_rate_avg
 * @param _tx_error_rate_avg New value for member tx_error_rate_avg
 */
void px4_msgs::msg::TelemetryStatus::tx_error_rate_avg(float _tx_error_rate_avg)
{
m_tx_error_rate_avg = _tx_error_rate_avg;
}

/*!
 * @brief This function returns the value of member tx_error_rate_avg
 * @return Value of member tx_error_rate_avg
 */
float px4_msgs::msg::TelemetryStatus::tx_error_rate_avg() const
{
    return m_tx_error_rate_avg;
}

/*!
 * @brief This function returns a reference to member tx_error_rate_avg
 * @return Reference to member tx_error_rate_avg
 */
float& px4_msgs::msg::TelemetryStatus::tx_error_rate_avg()
{
    return m_tx_error_rate_avg;
}

/*!
 * @brief This function sets a value in member tx_message_count
 * @param _tx_message_count New value for member tx_message_count
 */
void px4_msgs::msg::TelemetryStatus::tx_message_count(uint32_t _tx_message_count)
{
m_tx_message_count = _tx_message_count;
}

/*!
 * @brief This function returns the value of member tx_message_count
 * @return Value of member tx_message_count
 */
uint32_t px4_msgs::msg::TelemetryStatus::tx_message_count() const
{
    return m_tx_message_count;
}

/*!
 * @brief This function returns a reference to member tx_message_count
 * @return Reference to member tx_message_count
 */
uint32_t& px4_msgs::msg::TelemetryStatus::tx_message_count()
{
    return m_tx_message_count;
}

/*!
 * @brief This function sets a value in member tx_buffer_overruns
 * @param _tx_buffer_overruns New value for member tx_buffer_overruns
 */
void px4_msgs::msg::TelemetryStatus::tx_buffer_overruns(uint32_t _tx_buffer_overruns)
{
m_tx_buffer_overruns = _tx_buffer_overruns;
}

/*!
 * @brief This function returns the value of member tx_buffer_overruns
 * @return Value of member tx_buffer_overruns
 */
uint32_t px4_msgs::msg::TelemetryStatus::tx_buffer_overruns() const
{
    return m_tx_buffer_overruns;
}

/*!
 * @brief This function returns a reference to member tx_buffer_overruns
 * @return Reference to member tx_buffer_overruns
 */
uint32_t& px4_msgs::msg::TelemetryStatus::tx_buffer_overruns()
{
    return m_tx_buffer_overruns;
}

/*!
 * @brief This function sets a value in member rx_rate_avg
 * @param _rx_rate_avg New value for member rx_rate_avg
 */
void px4_msgs::msg::TelemetryStatus::rx_rate_avg(float _rx_rate_avg)
{
m_rx_rate_avg = _rx_rate_avg;
}

/*!
 * @brief This function returns the value of member rx_rate_avg
 * @return Value of member rx_rate_avg
 */
float px4_msgs::msg::TelemetryStatus::rx_rate_avg() const
{
    return m_rx_rate_avg;
}

/*!
 * @brief This function returns a reference to member rx_rate_avg
 * @return Reference to member rx_rate_avg
 */
float& px4_msgs::msg::TelemetryStatus::rx_rate_avg()
{
    return m_rx_rate_avg;
}

/*!
 * @brief This function sets a value in member rx_message_count
 * @param _rx_message_count New value for member rx_message_count
 */
void px4_msgs::msg::TelemetryStatus::rx_message_count(uint32_t _rx_message_count)
{
m_rx_message_count = _rx_message_count;
}

/*!
 * @brief This function returns the value of member rx_message_count
 * @return Value of member rx_message_count
 */
uint32_t px4_msgs::msg::TelemetryStatus::rx_message_count() const
{
    return m_rx_message_count;
}

/*!
 * @brief This function returns a reference to member rx_message_count
 * @return Reference to member rx_message_count
 */
uint32_t& px4_msgs::msg::TelemetryStatus::rx_message_count()
{
    return m_rx_message_count;
}

/*!
 * @brief This function sets a value in member rx_message_lost_count
 * @param _rx_message_lost_count New value for member rx_message_lost_count
 */
void px4_msgs::msg::TelemetryStatus::rx_message_lost_count(uint32_t _rx_message_lost_count)
{
m_rx_message_lost_count = _rx_message_lost_count;
}

/*!
 * @brief This function returns the value of member rx_message_lost_count
 * @return Value of member rx_message_lost_count
 */
uint32_t px4_msgs::msg::TelemetryStatus::rx_message_lost_count() const
{
    return m_rx_message_lost_count;
}

/*!
 * @brief This function returns a reference to member rx_message_lost_count
 * @return Reference to member rx_message_lost_count
 */
uint32_t& px4_msgs::msg::TelemetryStatus::rx_message_lost_count()
{
    return m_rx_message_lost_count;
}

/*!
 * @brief This function sets a value in member rx_buffer_overruns
 * @param _rx_buffer_overruns New value for member rx_buffer_overruns
 */
void px4_msgs::msg::TelemetryStatus::rx_buffer_overruns(uint32_t _rx_buffer_overruns)
{
m_rx_buffer_overruns = _rx_buffer_overruns;
}

/*!
 * @brief This function returns the value of member rx_buffer_overruns
 * @return Value of member rx_buffer_overruns
 */
uint32_t px4_msgs::msg::TelemetryStatus::rx_buffer_overruns() const
{
    return m_rx_buffer_overruns;
}

/*!
 * @brief This function returns a reference to member rx_buffer_overruns
 * @return Reference to member rx_buffer_overruns
 */
uint32_t& px4_msgs::msg::TelemetryStatus::rx_buffer_overruns()
{
    return m_rx_buffer_overruns;
}

/*!
 * @brief This function sets a value in member rx_parse_errors
 * @param _rx_parse_errors New value for member rx_parse_errors
 */
void px4_msgs::msg::TelemetryStatus::rx_parse_errors(uint32_t _rx_parse_errors)
{
m_rx_parse_errors = _rx_parse_errors;
}

/*!
 * @brief This function returns the value of member rx_parse_errors
 * @return Value of member rx_parse_errors
 */
uint32_t px4_msgs::msg::TelemetryStatus::rx_parse_errors() const
{
    return m_rx_parse_errors;
}

/*!
 * @brief This function returns a reference to member rx_parse_errors
 * @return Reference to member rx_parse_errors
 */
uint32_t& px4_msgs::msg::TelemetryStatus::rx_parse_errors()
{
    return m_rx_parse_errors;
}

/*!
 * @brief This function sets a value in member rx_packet_drop_count
 * @param _rx_packet_drop_count New value for member rx_packet_drop_count
 */
void px4_msgs::msg::TelemetryStatus::rx_packet_drop_count(uint32_t _rx_packet_drop_count)
{
m_rx_packet_drop_count = _rx_packet_drop_count;
}

/*!
 * @brief This function returns the value of member rx_packet_drop_count
 * @return Value of member rx_packet_drop_count
 */
uint32_t px4_msgs::msg::TelemetryStatus::rx_packet_drop_count() const
{
    return m_rx_packet_drop_count;
}

/*!
 * @brief This function returns a reference to member rx_packet_drop_count
 * @return Reference to member rx_packet_drop_count
 */
uint32_t& px4_msgs::msg::TelemetryStatus::rx_packet_drop_count()
{
    return m_rx_packet_drop_count;
}

/*!
 * @brief This function sets a value in member rx_message_lost_rate
 * @param _rx_message_lost_rate New value for member rx_message_lost_rate
 */
void px4_msgs::msg::TelemetryStatus::rx_message_lost_rate(float _rx_message_lost_rate)
{
m_rx_message_lost_rate = _rx_message_lost_rate;
}

/*!
 * @brief This function returns the value of member rx_message_lost_rate
 * @return Value of member rx_message_lost_rate
 */
float px4_msgs::msg::TelemetryStatus::rx_message_lost_rate() const
{
    return m_rx_message_lost_rate;
}

/*!
 * @brief This function returns a reference to member rx_message_lost_rate
 * @return Reference to member rx_message_lost_rate
 */
float& px4_msgs::msg::TelemetryStatus::rx_message_lost_rate()
{
    return m_rx_message_lost_rate;
}

/*!
 * @brief This function sets a value in member heartbeat_type_antenna_tracker
 * @param _heartbeat_type_antenna_tracker New value for member heartbeat_type_antenna_tracker
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_type_antenna_tracker(bool _heartbeat_type_antenna_tracker)
{
m_heartbeat_type_antenna_tracker = _heartbeat_type_antenna_tracker;
}

/*!
 * @brief This function returns the value of member heartbeat_type_antenna_tracker
 * @return Value of member heartbeat_type_antenna_tracker
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_type_antenna_tracker() const
{
    return m_heartbeat_type_antenna_tracker;
}

/*!
 * @brief This function returns a reference to member heartbeat_type_antenna_tracker
 * @return Reference to member heartbeat_type_antenna_tracker
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_type_antenna_tracker()
{
    return m_heartbeat_type_antenna_tracker;
}

/*!
 * @brief This function sets a value in member heartbeat_type_gcs
 * @param _heartbeat_type_gcs New value for member heartbeat_type_gcs
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_type_gcs(bool _heartbeat_type_gcs)
{
m_heartbeat_type_gcs = _heartbeat_type_gcs;
}

/*!
 * @brief This function returns the value of member heartbeat_type_gcs
 * @return Value of member heartbeat_type_gcs
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_type_gcs() const
{
    return m_heartbeat_type_gcs;
}

/*!
 * @brief This function returns a reference to member heartbeat_type_gcs
 * @return Reference to member heartbeat_type_gcs
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_type_gcs()
{
    return m_heartbeat_type_gcs;
}

/*!
 * @brief This function sets a value in member heartbeat_type_onboard_controller
 * @param _heartbeat_type_onboard_controller New value for member heartbeat_type_onboard_controller
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_type_onboard_controller(bool _heartbeat_type_onboard_controller)
{
m_heartbeat_type_onboard_controller = _heartbeat_type_onboard_controller;
}

/*!
 * @brief This function returns the value of member heartbeat_type_onboard_controller
 * @return Value of member heartbeat_type_onboard_controller
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_type_onboard_controller() const
{
    return m_heartbeat_type_onboard_controller;
}

/*!
 * @brief This function returns a reference to member heartbeat_type_onboard_controller
 * @return Reference to member heartbeat_type_onboard_controller
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_type_onboard_controller()
{
    return m_heartbeat_type_onboard_controller;
}

/*!
 * @brief This function sets a value in member heartbeat_type_gimbal
 * @param _heartbeat_type_gimbal New value for member heartbeat_type_gimbal
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_type_gimbal(bool _heartbeat_type_gimbal)
{
m_heartbeat_type_gimbal = _heartbeat_type_gimbal;
}

/*!
 * @brief This function returns the value of member heartbeat_type_gimbal
 * @return Value of member heartbeat_type_gimbal
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_type_gimbal() const
{
    return m_heartbeat_type_gimbal;
}

/*!
 * @brief This function returns a reference to member heartbeat_type_gimbal
 * @return Reference to member heartbeat_type_gimbal
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_type_gimbal()
{
    return m_heartbeat_type_gimbal;
}

/*!
 * @brief This function sets a value in member heartbeat_type_adsb
 * @param _heartbeat_type_adsb New value for member heartbeat_type_adsb
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_type_adsb(bool _heartbeat_type_adsb)
{
m_heartbeat_type_adsb = _heartbeat_type_adsb;
}

/*!
 * @brief This function returns the value of member heartbeat_type_adsb
 * @return Value of member heartbeat_type_adsb
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_type_adsb() const
{
    return m_heartbeat_type_adsb;
}

/*!
 * @brief This function returns a reference to member heartbeat_type_adsb
 * @return Reference to member heartbeat_type_adsb
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_type_adsb()
{
    return m_heartbeat_type_adsb;
}

/*!
 * @brief This function sets a value in member heartbeat_type_camera
 * @param _heartbeat_type_camera New value for member heartbeat_type_camera
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_type_camera(bool _heartbeat_type_camera)
{
m_heartbeat_type_camera = _heartbeat_type_camera;
}

/*!
 * @brief This function returns the value of member heartbeat_type_camera
 * @return Value of member heartbeat_type_camera
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_type_camera() const
{
    return m_heartbeat_type_camera;
}

/*!
 * @brief This function returns a reference to member heartbeat_type_camera
 * @return Reference to member heartbeat_type_camera
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_type_camera()
{
    return m_heartbeat_type_camera;
}

/*!
 * @brief This function sets a value in member heartbeat_type_parachute
 * @param _heartbeat_type_parachute New value for member heartbeat_type_parachute
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_type_parachute(bool _heartbeat_type_parachute)
{
m_heartbeat_type_parachute = _heartbeat_type_parachute;
}

/*!
 * @brief This function returns the value of member heartbeat_type_parachute
 * @return Value of member heartbeat_type_parachute
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_type_parachute() const
{
    return m_heartbeat_type_parachute;
}

/*!
 * @brief This function returns a reference to member heartbeat_type_parachute
 * @return Reference to member heartbeat_type_parachute
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_type_parachute()
{
    return m_heartbeat_type_parachute;
}

/*!
 * @brief This function sets a value in member heartbeat_component_telemetry_radio
 * @param _heartbeat_component_telemetry_radio New value for member heartbeat_component_telemetry_radio
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_component_telemetry_radio(bool _heartbeat_component_telemetry_radio)
{
m_heartbeat_component_telemetry_radio = _heartbeat_component_telemetry_radio;
}

/*!
 * @brief This function returns the value of member heartbeat_component_telemetry_radio
 * @return Value of member heartbeat_component_telemetry_radio
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_component_telemetry_radio() const
{
    return m_heartbeat_component_telemetry_radio;
}

/*!
 * @brief This function returns a reference to member heartbeat_component_telemetry_radio
 * @return Reference to member heartbeat_component_telemetry_radio
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_component_telemetry_radio()
{
    return m_heartbeat_component_telemetry_radio;
}

/*!
 * @brief This function sets a value in member heartbeat_component_log
 * @param _heartbeat_component_log New value for member heartbeat_component_log
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_component_log(bool _heartbeat_component_log)
{
m_heartbeat_component_log = _heartbeat_component_log;
}

/*!
 * @brief This function returns the value of member heartbeat_component_log
 * @return Value of member heartbeat_component_log
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_component_log() const
{
    return m_heartbeat_component_log;
}

/*!
 * @brief This function returns a reference to member heartbeat_component_log
 * @return Reference to member heartbeat_component_log
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_component_log()
{
    return m_heartbeat_component_log;
}

/*!
 * @brief This function sets a value in member heartbeat_component_osd
 * @param _heartbeat_component_osd New value for member heartbeat_component_osd
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_component_osd(bool _heartbeat_component_osd)
{
m_heartbeat_component_osd = _heartbeat_component_osd;
}

/*!
 * @brief This function returns the value of member heartbeat_component_osd
 * @return Value of member heartbeat_component_osd
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_component_osd() const
{
    return m_heartbeat_component_osd;
}

/*!
 * @brief This function returns a reference to member heartbeat_component_osd
 * @return Reference to member heartbeat_component_osd
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_component_osd()
{
    return m_heartbeat_component_osd;
}

/*!
 * @brief This function sets a value in member heartbeat_component_obstacle_avoidance
 * @param _heartbeat_component_obstacle_avoidance New value for member heartbeat_component_obstacle_avoidance
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_component_obstacle_avoidance(bool _heartbeat_component_obstacle_avoidance)
{
m_heartbeat_component_obstacle_avoidance = _heartbeat_component_obstacle_avoidance;
}

/*!
 * @brief This function returns the value of member heartbeat_component_obstacle_avoidance
 * @return Value of member heartbeat_component_obstacle_avoidance
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_component_obstacle_avoidance() const
{
    return m_heartbeat_component_obstacle_avoidance;
}

/*!
 * @brief This function returns a reference to member heartbeat_component_obstacle_avoidance
 * @return Reference to member heartbeat_component_obstacle_avoidance
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_component_obstacle_avoidance()
{
    return m_heartbeat_component_obstacle_avoidance;
}

/*!
 * @brief This function sets a value in member heartbeat_component_vio
 * @param _heartbeat_component_vio New value for member heartbeat_component_vio
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_component_vio(bool _heartbeat_component_vio)
{
m_heartbeat_component_vio = _heartbeat_component_vio;
}

/*!
 * @brief This function returns the value of member heartbeat_component_vio
 * @return Value of member heartbeat_component_vio
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_component_vio() const
{
    return m_heartbeat_component_vio;
}

/*!
 * @brief This function returns a reference to member heartbeat_component_vio
 * @return Reference to member heartbeat_component_vio
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_component_vio()
{
    return m_heartbeat_component_vio;
}

/*!
 * @brief This function sets a value in member heartbeat_component_pairing_manager
 * @param _heartbeat_component_pairing_manager New value for member heartbeat_component_pairing_manager
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_component_pairing_manager(bool _heartbeat_component_pairing_manager)
{
m_heartbeat_component_pairing_manager = _heartbeat_component_pairing_manager;
}

/*!
 * @brief This function returns the value of member heartbeat_component_pairing_manager
 * @return Value of member heartbeat_component_pairing_manager
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_component_pairing_manager() const
{
    return m_heartbeat_component_pairing_manager;
}

/*!
 * @brief This function returns a reference to member heartbeat_component_pairing_manager
 * @return Reference to member heartbeat_component_pairing_manager
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_component_pairing_manager()
{
    return m_heartbeat_component_pairing_manager;
}

/*!
 * @brief This function sets a value in member heartbeat_component_udp_bridge
 * @param _heartbeat_component_udp_bridge New value for member heartbeat_component_udp_bridge
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_component_udp_bridge(bool _heartbeat_component_udp_bridge)
{
m_heartbeat_component_udp_bridge = _heartbeat_component_udp_bridge;
}

/*!
 * @brief This function returns the value of member heartbeat_component_udp_bridge
 * @return Value of member heartbeat_component_udp_bridge
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_component_udp_bridge() const
{
    return m_heartbeat_component_udp_bridge;
}

/*!
 * @brief This function returns a reference to member heartbeat_component_udp_bridge
 * @return Reference to member heartbeat_component_udp_bridge
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_component_udp_bridge()
{
    return m_heartbeat_component_udp_bridge;
}

/*!
 * @brief This function sets a value in member heartbeat_component_uart_bridge
 * @param _heartbeat_component_uart_bridge New value for member heartbeat_component_uart_bridge
 */
void px4_msgs::msg::TelemetryStatus::heartbeat_component_uart_bridge(bool _heartbeat_component_uart_bridge)
{
m_heartbeat_component_uart_bridge = _heartbeat_component_uart_bridge;
}

/*!
 * @brief This function returns the value of member heartbeat_component_uart_bridge
 * @return Value of member heartbeat_component_uart_bridge
 */
bool px4_msgs::msg::TelemetryStatus::heartbeat_component_uart_bridge() const
{
    return m_heartbeat_component_uart_bridge;
}

/*!
 * @brief This function returns a reference to member heartbeat_component_uart_bridge
 * @return Reference to member heartbeat_component_uart_bridge
 */
bool& px4_msgs::msg::TelemetryStatus::heartbeat_component_uart_bridge()
{
    return m_heartbeat_component_uart_bridge;
}

/*!
 * @brief This function sets a value in member avoidance_system_healthy
 * @param _avoidance_system_healthy New value for member avoidance_system_healthy
 */
void px4_msgs::msg::TelemetryStatus::avoidance_system_healthy(bool _avoidance_system_healthy)
{
m_avoidance_system_healthy = _avoidance_system_healthy;
}

/*!
 * @brief This function returns the value of member avoidance_system_healthy
 * @return Value of member avoidance_system_healthy
 */
bool px4_msgs::msg::TelemetryStatus::avoidance_system_healthy() const
{
    return m_avoidance_system_healthy;
}

/*!
 * @brief This function returns a reference to member avoidance_system_healthy
 * @return Reference to member avoidance_system_healthy
 */
bool& px4_msgs::msg::TelemetryStatus::avoidance_system_healthy()
{
    return m_avoidance_system_healthy;
}

/*!
 * @brief This function sets a value in member parachute_system_healthy
 * @param _parachute_system_healthy New value for member parachute_system_healthy
 */
void px4_msgs::msg::TelemetryStatus::parachute_system_healthy(bool _parachute_system_healthy)
{
m_parachute_system_healthy = _parachute_system_healthy;
}

/*!
 * @brief This function returns the value of member parachute_system_healthy
 * @return Value of member parachute_system_healthy
 */
bool px4_msgs::msg::TelemetryStatus::parachute_system_healthy() const
{
    return m_parachute_system_healthy;
}

/*!
 * @brief This function returns a reference to member parachute_system_healthy
 * @return Reference to member parachute_system_healthy
 */
bool& px4_msgs::msg::TelemetryStatus::parachute_system_healthy()
{
    return m_parachute_system_healthy;
}


size_t px4_msgs::msg::TelemetryStatus::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;









































    return current_align;
}

bool px4_msgs::msg::TelemetryStatus::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::TelemetryStatus::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
}


