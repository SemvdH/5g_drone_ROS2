// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DebugArray.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "DebugArray.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




px4_msgs::msg::DebugArray::DebugArray()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@77f1baf5
    m_timestamp = 0;
    // m_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@41a2befb
    m_id = 0;
    // m_name com.eprosima.idl.parser.typecode.AliasTypeCode@6c40365c
    memset(&m_name, 0, (10) * 1);
    // m_data com.eprosima.idl.parser.typecode.AliasTypeCode@7bedc48a
    memset(&m_data, 0, (58) * 4);

}

px4_msgs::msg::DebugArray::~DebugArray()
{




}

px4_msgs::msg::DebugArray::DebugArray(const DebugArray &x)
{
    m_timestamp = x.m_timestamp;
    m_id = x.m_id;
    m_name = x.m_name;
    m_data = x.m_data;
}

px4_msgs::msg::DebugArray::DebugArray(DebugArray &&x)
{
    m_timestamp = x.m_timestamp;
    m_id = x.m_id;
    m_name = std::move(x.m_name);
    m_data = std::move(x.m_data);
}

px4_msgs::msg::DebugArray& px4_msgs::msg::DebugArray::operator=(const DebugArray &x)
{

    m_timestamp = x.m_timestamp;
    m_id = x.m_id;
    m_name = x.m_name;
    m_data = x.m_data;

    return *this;
}

px4_msgs::msg::DebugArray& px4_msgs::msg::DebugArray::operator=(DebugArray &&x)
{

    m_timestamp = x.m_timestamp;
    m_id = x.m_id;
    m_name = std::move(x.m_name);
    m_data = std::move(x.m_data);

    return *this;
}

size_t px4_msgs::msg::DebugArray::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += ((10) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((58) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::DebugArray::getCdrSerializedSize(const px4_msgs::msg::DebugArray& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    if ((10) > 0)
    {
        current_alignment += ((10) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    if ((58) > 0)
    {
        current_alignment += ((58) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }


    return current_alignment - initial_alignment;
}

void px4_msgs::msg::DebugArray::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_id;
    scdr << m_name;

    scdr << m_data;

}

void px4_msgs::msg::DebugArray::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_id;
    dcdr >> m_name;

    dcdr >> m_data;

}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::DebugArray::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::DebugArray::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::DebugArray::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void px4_msgs::msg::DebugArray::id(uint16_t _id)
{
m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint16_t px4_msgs::msg::DebugArray::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint16_t& px4_msgs::msg::DebugArray::id()
{
    return m_id;
}

/*!
 * @brief This function copies the value in member name
 * @param _name New value to be copied in member name
 */
void px4_msgs::msg::DebugArray::name(const px4_msgs::msg::uint8__10 &_name)
{
m_name = _name;
}

/*!
 * @brief This function moves the value in member name
 * @param _name New value to be moved in member name
 */
void px4_msgs::msg::DebugArray::name(px4_msgs::msg::uint8__10 &&_name)
{
m_name = std::move(_name);
}

/*!
 * @brief This function returns a constant reference to member name
 * @return Constant reference to member name
 */
const px4_msgs::msg::uint8__10& px4_msgs::msg::DebugArray::name() const
{
    return m_name;
}

/*!
 * @brief This function returns a reference to member name
 * @return Reference to member name
 */
px4_msgs::msg::uint8__10& px4_msgs::msg::DebugArray::name()
{
    return m_name;
}
/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void px4_msgs::msg::DebugArray::data(const px4_msgs::msg::float__58 &_data)
{
m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void px4_msgs::msg::DebugArray::data(px4_msgs::msg::float__58 &&_data)
{
m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const px4_msgs::msg::float__58& px4_msgs::msg::DebugArray::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
px4_msgs::msg::float__58& px4_msgs::msg::DebugArray::data()
{
    return m_data;
}

size_t px4_msgs::msg::DebugArray::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool px4_msgs::msg::DebugArray::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::DebugArray::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
}


