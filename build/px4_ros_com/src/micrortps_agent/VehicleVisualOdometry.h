// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file VehicleVisualOdometry.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_VEHICLEVISUALODOMETRY_H_
#define _PX4_MSGS_MSG_VEHICLEVISUALODOMETRY_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(VehicleVisualOdometry_SOURCE)
#define VehicleVisualOdometry_DllAPI __declspec( dllexport )
#else
#define VehicleVisualOdometry_DllAPI __declspec( dllimport )
#endif // VehicleVisualOdometry_SOURCE
#else
#define VehicleVisualOdometry_DllAPI
#endif
#else
#define VehicleVisualOdometry_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        typedef std::array<float, 4> float__4;
        typedef std::array<float, 21> float__21;
        namespace VehicleVisualOdometry_Constants
        {
            const uint8_t COVARIANCE_MATRIX_X_VARIANCE = 0;
            const uint8_t COVARIANCE_MATRIX_Y_VARIANCE = 6;
            const uint8_t COVARIANCE_MATRIX_Z_VARIANCE = 11;
            const uint8_t COVARIANCE_MATRIX_ROLL_VARIANCE = 15;
            const uint8_t COVARIANCE_MATRIX_PITCH_VARIANCE = 18;
            const uint8_t COVARIANCE_MATRIX_YAW_VARIANCE = 20;
            const uint8_t COVARIANCE_MATRIX_VX_VARIANCE = 0;
            const uint8_t COVARIANCE_MATRIX_VY_VARIANCE = 6;
            const uint8_t COVARIANCE_MATRIX_VZ_VARIANCE = 11;
            const uint8_t COVARIANCE_MATRIX_ROLLRATE_VARIANCE = 15;
            const uint8_t COVARIANCE_MATRIX_PITCHRATE_VARIANCE = 18;
            const uint8_t COVARIANCE_MATRIX_YAWRATE_VARIANCE = 20;
            const uint8_t LOCAL_FRAME_NED = 0;
            const uint8_t LOCAL_FRAME_FRD = 1;
            const uint8_t LOCAL_FRAME_OTHER = 2;
            const uint8_t BODY_FRAME_FRD = 3;
        }
        /*!
         * @brief This class represents the structure VehicleVisualOdometry defined by the user in the IDL file.
         * @ingroup VEHICLEVISUALODOMETRY
         */
        class VehicleVisualOdometry
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport VehicleVisualOdometry();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~VehicleVisualOdometry();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::VehicleVisualOdometry that will be copied.
             */
            eProsima_user_DllExport VehicleVisualOdometry(const VehicleVisualOdometry &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::VehicleVisualOdometry that will be copied.
             */
            eProsima_user_DllExport VehicleVisualOdometry(VehicleVisualOdometry &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::VehicleVisualOdometry that will be copied.
             */
            eProsima_user_DllExport VehicleVisualOdometry& operator=(const VehicleVisualOdometry &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::VehicleVisualOdometry that will be copied.
             */
            eProsima_user_DllExport VehicleVisualOdometry& operator=(VehicleVisualOdometry &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function sets a value in member timestamp_sample
             * @param _timestamp_sample New value for member timestamp_sample
             */
            eProsima_user_DllExport void timestamp_sample(uint64_t _timestamp_sample);

            /*!
             * @brief This function returns the value of member timestamp_sample
             * @return Value of member timestamp_sample
             */
            eProsima_user_DllExport uint64_t timestamp_sample() const;

            /*!
             * @brief This function returns a reference to member timestamp_sample
             * @return Reference to member timestamp_sample
             */
            eProsima_user_DllExport uint64_t& timestamp_sample();

            /*!
             * @brief This function sets a value in member local_frame
             * @param _local_frame New value for member local_frame
             */
            eProsima_user_DllExport void local_frame(uint8_t _local_frame);

            /*!
             * @brief This function returns the value of member local_frame
             * @return Value of member local_frame
             */
            eProsima_user_DllExport uint8_t local_frame() const;

            /*!
             * @brief This function returns a reference to member local_frame
             * @return Reference to member local_frame
             */
            eProsima_user_DllExport uint8_t& local_frame();

            /*!
             * @brief This function sets a value in member x
             * @param _x New value for member x
             */
            eProsima_user_DllExport void x(float _x);

            /*!
             * @brief This function returns the value of member x
             * @return Value of member x
             */
            eProsima_user_DllExport float x() const;

            /*!
             * @brief This function returns a reference to member x
             * @return Reference to member x
             */
            eProsima_user_DllExport float& x();

            /*!
             * @brief This function sets a value in member y
             * @param _y New value for member y
             */
            eProsima_user_DllExport void y(float _y);

            /*!
             * @brief This function returns the value of member y
             * @return Value of member y
             */
            eProsima_user_DllExport float y() const;

            /*!
             * @brief This function returns a reference to member y
             * @return Reference to member y
             */
            eProsima_user_DllExport float& y();

            /*!
             * @brief This function sets a value in member z
             * @param _z New value for member z
             */
            eProsima_user_DllExport void z(float _z);

            /*!
             * @brief This function returns the value of member z
             * @return Value of member z
             */
            eProsima_user_DllExport float z() const;

            /*!
             * @brief This function returns a reference to member z
             * @return Reference to member z
             */
            eProsima_user_DllExport float& z();

            /*!
             * @brief This function copies the value in member q
             * @param _q New value to be copied in member q
             */
            eProsima_user_DllExport void q(const px4_msgs::msg::float__4 &_q);

            /*!
             * @brief This function moves the value in member q
             * @param _q New value to be moved in member q
             */
            eProsima_user_DllExport void q(px4_msgs::msg::float__4 &&_q);

            /*!
             * @brief This function returns a constant reference to member q
             * @return Constant reference to member q
             */
            eProsima_user_DllExport const px4_msgs::msg::float__4& q() const;

            /*!
             * @brief This function returns a reference to member q
             * @return Reference to member q
             */
            eProsima_user_DllExport px4_msgs::msg::float__4& q();
            /*!
             * @brief This function copies the value in member q_offset
             * @param _q_offset New value to be copied in member q_offset
             */
            eProsima_user_DllExport void q_offset(const px4_msgs::msg::float__4 &_q_offset);

            /*!
             * @brief This function moves the value in member q_offset
             * @param _q_offset New value to be moved in member q_offset
             */
            eProsima_user_DllExport void q_offset(px4_msgs::msg::float__4 &&_q_offset);

            /*!
             * @brief This function returns a constant reference to member q_offset
             * @return Constant reference to member q_offset
             */
            eProsima_user_DllExport const px4_msgs::msg::float__4& q_offset() const;

            /*!
             * @brief This function returns a reference to member q_offset
             * @return Reference to member q_offset
             */
            eProsima_user_DllExport px4_msgs::msg::float__4& q_offset();
            /*!
             * @brief This function copies the value in member pose_covariance
             * @param _pose_covariance New value to be copied in member pose_covariance
             */
            eProsima_user_DllExport void pose_covariance(const px4_msgs::msg::float__21 &_pose_covariance);

            /*!
             * @brief This function moves the value in member pose_covariance
             * @param _pose_covariance New value to be moved in member pose_covariance
             */
            eProsima_user_DllExport void pose_covariance(px4_msgs::msg::float__21 &&_pose_covariance);

            /*!
             * @brief This function returns a constant reference to member pose_covariance
             * @return Constant reference to member pose_covariance
             */
            eProsima_user_DllExport const px4_msgs::msg::float__21& pose_covariance() const;

            /*!
             * @brief This function returns a reference to member pose_covariance
             * @return Reference to member pose_covariance
             */
            eProsima_user_DllExport px4_msgs::msg::float__21& pose_covariance();
            /*!
             * @brief This function sets a value in member velocity_frame
             * @param _velocity_frame New value for member velocity_frame
             */
            eProsima_user_DllExport void velocity_frame(uint8_t _velocity_frame);

            /*!
             * @brief This function returns the value of member velocity_frame
             * @return Value of member velocity_frame
             */
            eProsima_user_DllExport uint8_t velocity_frame() const;

            /*!
             * @brief This function returns a reference to member velocity_frame
             * @return Reference to member velocity_frame
             */
            eProsima_user_DllExport uint8_t& velocity_frame();

            /*!
             * @brief This function sets a value in member vx
             * @param _vx New value for member vx
             */
            eProsima_user_DllExport void vx(float _vx);

            /*!
             * @brief This function returns the value of member vx
             * @return Value of member vx
             */
            eProsima_user_DllExport float vx() const;

            /*!
             * @brief This function returns a reference to member vx
             * @return Reference to member vx
             */
            eProsima_user_DllExport float& vx();

            /*!
             * @brief This function sets a value in member vy
             * @param _vy New value for member vy
             */
            eProsima_user_DllExport void vy(float _vy);

            /*!
             * @brief This function returns the value of member vy
             * @return Value of member vy
             */
            eProsima_user_DllExport float vy() const;

            /*!
             * @brief This function returns a reference to member vy
             * @return Reference to member vy
             */
            eProsima_user_DllExport float& vy();

            /*!
             * @brief This function sets a value in member vz
             * @param _vz New value for member vz
             */
            eProsima_user_DllExport void vz(float _vz);

            /*!
             * @brief This function returns the value of member vz
             * @return Value of member vz
             */
            eProsima_user_DllExport float vz() const;

            /*!
             * @brief This function returns a reference to member vz
             * @return Reference to member vz
             */
            eProsima_user_DllExport float& vz();

            /*!
             * @brief This function sets a value in member rollspeed
             * @param _rollspeed New value for member rollspeed
             */
            eProsima_user_DllExport void rollspeed(float _rollspeed);

            /*!
             * @brief This function returns the value of member rollspeed
             * @return Value of member rollspeed
             */
            eProsima_user_DllExport float rollspeed() const;

            /*!
             * @brief This function returns a reference to member rollspeed
             * @return Reference to member rollspeed
             */
            eProsima_user_DllExport float& rollspeed();

            /*!
             * @brief This function sets a value in member pitchspeed
             * @param _pitchspeed New value for member pitchspeed
             */
            eProsima_user_DllExport void pitchspeed(float _pitchspeed);

            /*!
             * @brief This function returns the value of member pitchspeed
             * @return Value of member pitchspeed
             */
            eProsima_user_DllExport float pitchspeed() const;

            /*!
             * @brief This function returns a reference to member pitchspeed
             * @return Reference to member pitchspeed
             */
            eProsima_user_DllExport float& pitchspeed();

            /*!
             * @brief This function sets a value in member yawspeed
             * @param _yawspeed New value for member yawspeed
             */
            eProsima_user_DllExport void yawspeed(float _yawspeed);

            /*!
             * @brief This function returns the value of member yawspeed
             * @return Value of member yawspeed
             */
            eProsima_user_DllExport float yawspeed() const;

            /*!
             * @brief This function returns a reference to member yawspeed
             * @return Reference to member yawspeed
             */
            eProsima_user_DllExport float& yawspeed();

            /*!
             * @brief This function copies the value in member velocity_covariance
             * @param _velocity_covariance New value to be copied in member velocity_covariance
             */
            eProsima_user_DllExport void velocity_covariance(const px4_msgs::msg::float__21 &_velocity_covariance);

            /*!
             * @brief This function moves the value in member velocity_covariance
             * @param _velocity_covariance New value to be moved in member velocity_covariance
             */
            eProsima_user_DllExport void velocity_covariance(px4_msgs::msg::float__21 &&_velocity_covariance);

            /*!
             * @brief This function returns a constant reference to member velocity_covariance
             * @return Constant reference to member velocity_covariance
             */
            eProsima_user_DllExport const px4_msgs::msg::float__21& velocity_covariance() const;

            /*!
             * @brief This function returns a reference to member velocity_covariance
             * @return Reference to member velocity_covariance
             */
            eProsima_user_DllExport px4_msgs::msg::float__21& velocity_covariance();
            /*!
             * @brief This function sets a value in member reset_counter
             * @param _reset_counter New value for member reset_counter
             */
            eProsima_user_DllExport void reset_counter(uint8_t _reset_counter);

            /*!
             * @brief This function returns the value of member reset_counter
             * @return Value of member reset_counter
             */
            eProsima_user_DllExport uint8_t reset_counter() const;

            /*!
             * @brief This function returns a reference to member reset_counter
             * @return Reference to member reset_counter
             */
            eProsima_user_DllExport uint8_t& reset_counter();


            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::VehicleVisualOdometry& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            uint64_t m_timestamp_sample;
            uint8_t m_local_frame;
            float m_x;
            float m_y;
            float m_z;
            px4_msgs::msg::float__4 m_q;
            px4_msgs::msg::float__4 m_q_offset;
            px4_msgs::msg::float__21 m_pose_covariance;
            uint8_t m_velocity_frame;
            float m_vx;
            float m_vy;
            float m_vz;
            float m_rollspeed;
            float m_pitchspeed;
            float m_yawspeed;
            px4_msgs::msg::float__21 m_velocity_covariance;
            uint8_t m_reset_counter;
        };
    }
}

#endif // _PX4_MSGS_MSG_VEHICLEVISUALODOMETRY_H_