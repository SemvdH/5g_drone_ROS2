// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TrajectoryBezier.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "TrajectoryBezier.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


px4_msgs::msg::TrajectoryBezier::TrajectoryBezier()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1bb5a082
    m_timestamp = 0;
    // m_position com.eprosima.idl.parser.typecode.AliasTypeCode@78691363
    memset(&m_position, 0, (3) * 4);
    // m_yaw com.eprosima.idl.parser.typecode.PrimitiveTypeCode@41d477ed
    m_yaw = 0.0;
    // m_delta com.eprosima.idl.parser.typecode.PrimitiveTypeCode@3590fc5b
    m_delta = 0.0;

}

px4_msgs::msg::TrajectoryBezier::~TrajectoryBezier()
{




}

px4_msgs::msg::TrajectoryBezier::TrajectoryBezier(const TrajectoryBezier &x)
{
    m_timestamp = x.m_timestamp;
    m_position = x.m_position;
    m_yaw = x.m_yaw;
    m_delta = x.m_delta;
}

px4_msgs::msg::TrajectoryBezier::TrajectoryBezier(TrajectoryBezier &&x)
{
    m_timestamp = x.m_timestamp;
    m_position = std::move(x.m_position);
    m_yaw = x.m_yaw;
    m_delta = x.m_delta;
}

px4_msgs::msg::TrajectoryBezier& px4_msgs::msg::TrajectoryBezier::operator=(const TrajectoryBezier &x)
{

    m_timestamp = x.m_timestamp;
    m_position = x.m_position;
    m_yaw = x.m_yaw;
    m_delta = x.m_delta;

    return *this;
}

px4_msgs::msg::TrajectoryBezier& px4_msgs::msg::TrajectoryBezier::operator=(TrajectoryBezier &&x)
{

    m_timestamp = x.m_timestamp;
    m_position = std::move(x.m_position);
    m_yaw = x.m_yaw;
    m_delta = x.m_delta;

    return *this;
}

size_t px4_msgs::msg::TrajectoryBezier::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::TrajectoryBezier::getCdrSerializedSize(const px4_msgs::msg::TrajectoryBezier& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::TrajectoryBezier::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_position;

    scdr << m_yaw;
    scdr << m_delta;
}

void px4_msgs::msg::TrajectoryBezier::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_position;

    dcdr >> m_yaw;
    dcdr >> m_delta;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::TrajectoryBezier::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::TrajectoryBezier::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::TrajectoryBezier::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void px4_msgs::msg::TrajectoryBezier::position(const px4_msgs::msg::float__3 &_position)
{
m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void px4_msgs::msg::TrajectoryBezier::position(px4_msgs::msg::float__3 &&_position)
{
m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const px4_msgs::msg::float__3& px4_msgs::msg::TrajectoryBezier::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
px4_msgs::msg::float__3& px4_msgs::msg::TrajectoryBezier::position()
{
    return m_position;
}
/*!
 * @brief This function sets a value in member yaw
 * @param _yaw New value for member yaw
 */
void px4_msgs::msg::TrajectoryBezier::yaw(float _yaw)
{
m_yaw = _yaw;
}

/*!
 * @brief This function returns the value of member yaw
 * @return Value of member yaw
 */
float px4_msgs::msg::TrajectoryBezier::yaw() const
{
    return m_yaw;
}

/*!
 * @brief This function returns a reference to member yaw
 * @return Reference to member yaw
 */
float& px4_msgs::msg::TrajectoryBezier::yaw()
{
    return m_yaw;
}

/*!
 * @brief This function sets a value in member delta
 * @param _delta New value for member delta
 */
void px4_msgs::msg::TrajectoryBezier::delta(float _delta)
{
m_delta = _delta;
}

/*!
 * @brief This function returns the value of member delta
 * @return Value of member delta
 */
float px4_msgs::msg::TrajectoryBezier::delta() const
{
    return m_delta;
}

/*!
 * @brief This function returns a reference to member delta
 * @return Reference to member delta
 */
float& px4_msgs::msg::TrajectoryBezier::delta()
{
    return m_delta;
}


size_t px4_msgs::msg::TrajectoryBezier::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;







    return current_align;
}

bool px4_msgs::msg::TrajectoryBezier::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::TrajectoryBezier::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
}


