// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TrajectoryWaypoint.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "TrajectoryWaypoint.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


px4_msgs::msg::TrajectoryWaypoint::TrajectoryWaypoint()
{
    // m_timestamp com.eprosima.idl.parser.typecode.PrimitiveTypeCode@28cda624
    m_timestamp = 0;
    // m_position com.eprosima.idl.parser.typecode.AliasTypeCode@1500b2f3
    memset(&m_position, 0, (3) * 4);
    // m_velocity com.eprosima.idl.parser.typecode.AliasTypeCode@1500b2f3
    memset(&m_velocity, 0, (3) * 4);
    // m_acceleration com.eprosima.idl.parser.typecode.AliasTypeCode@1500b2f3
    memset(&m_acceleration, 0, (3) * 4);
    // m_yaw com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7eecb5b8
    m_yaw = 0.0;
    // m_yaw_speed com.eprosima.idl.parser.typecode.PrimitiveTypeCode@126253fd
    m_yaw_speed = 0.0;
    // m_point_valid com.eprosima.idl.parser.typecode.PrimitiveTypeCode@57db2b13
    m_point_valid = false;
    // m_type com.eprosima.idl.parser.typecode.PrimitiveTypeCode@475c9c31
    m_type = 0;

}

px4_msgs::msg::TrajectoryWaypoint::~TrajectoryWaypoint()
{








}

px4_msgs::msg::TrajectoryWaypoint::TrajectoryWaypoint(const TrajectoryWaypoint &x)
{
    m_timestamp = x.m_timestamp;
    m_position = x.m_position;
    m_velocity = x.m_velocity;
    m_acceleration = x.m_acceleration;
    m_yaw = x.m_yaw;
    m_yaw_speed = x.m_yaw_speed;
    m_point_valid = x.m_point_valid;
    m_type = x.m_type;
}

px4_msgs::msg::TrajectoryWaypoint::TrajectoryWaypoint(TrajectoryWaypoint &&x)
{
    m_timestamp = x.m_timestamp;
    m_position = std::move(x.m_position);
    m_velocity = std::move(x.m_velocity);
    m_acceleration = std::move(x.m_acceleration);
    m_yaw = x.m_yaw;
    m_yaw_speed = x.m_yaw_speed;
    m_point_valid = x.m_point_valid;
    m_type = x.m_type;
}

px4_msgs::msg::TrajectoryWaypoint& px4_msgs::msg::TrajectoryWaypoint::operator=(const TrajectoryWaypoint &x)
{

    m_timestamp = x.m_timestamp;
    m_position = x.m_position;
    m_velocity = x.m_velocity;
    m_acceleration = x.m_acceleration;
    m_yaw = x.m_yaw;
    m_yaw_speed = x.m_yaw_speed;
    m_point_valid = x.m_point_valid;
    m_type = x.m_type;

    return *this;
}

px4_msgs::msg::TrajectoryWaypoint& px4_msgs::msg::TrajectoryWaypoint::operator=(TrajectoryWaypoint &&x)
{

    m_timestamp = x.m_timestamp;
    m_position = std::move(x.m_position);
    m_velocity = std::move(x.m_velocity);
    m_acceleration = std::move(x.m_acceleration);
    m_yaw = x.m_yaw;
    m_yaw_speed = x.m_yaw_speed;
    m_point_valid = x.m_point_valid;
    m_type = x.m_type;

    return *this;
}

size_t px4_msgs::msg::TrajectoryWaypoint::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t px4_msgs::msg::TrajectoryWaypoint::getCdrSerializedSize(const px4_msgs::msg::TrajectoryWaypoint& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    if ((3) > 0)
    {
        current_alignment += ((3) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void px4_msgs::msg::TrajectoryWaypoint::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp;
    scdr << m_position;

    scdr << m_velocity;

    scdr << m_acceleration;

    scdr << m_yaw;
    scdr << m_yaw_speed;
    scdr << m_point_valid;
    scdr << m_type;
}

void px4_msgs::msg::TrajectoryWaypoint::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_position;

    dcdr >> m_velocity;

    dcdr >> m_acceleration;

    dcdr >> m_yaw;
    dcdr >> m_yaw_speed;
    dcdr >> m_point_valid;
    dcdr >> m_type;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void px4_msgs::msg::TrajectoryWaypoint::timestamp(uint64_t _timestamp)
{
m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
uint64_t px4_msgs::msg::TrajectoryWaypoint::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
uint64_t& px4_msgs::msg::TrajectoryWaypoint::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member position
 * @param _position New value to be copied in member position
 */
void px4_msgs::msg::TrajectoryWaypoint::position(const px4_msgs::msg::float__3 &_position)
{
m_position = _position;
}

/*!
 * @brief This function moves the value in member position
 * @param _position New value to be moved in member position
 */
void px4_msgs::msg::TrajectoryWaypoint::position(px4_msgs::msg::float__3 &&_position)
{
m_position = std::move(_position);
}

/*!
 * @brief This function returns a constant reference to member position
 * @return Constant reference to member position
 */
const px4_msgs::msg::float__3& px4_msgs::msg::TrajectoryWaypoint::position() const
{
    return m_position;
}

/*!
 * @brief This function returns a reference to member position
 * @return Reference to member position
 */
px4_msgs::msg::float__3& px4_msgs::msg::TrajectoryWaypoint::position()
{
    return m_position;
}
/*!
 * @brief This function copies the value in member velocity
 * @param _velocity New value to be copied in member velocity
 */
void px4_msgs::msg::TrajectoryWaypoint::velocity(const px4_msgs::msg::float__3 &_velocity)
{
m_velocity = _velocity;
}

/*!
 * @brief This function moves the value in member velocity
 * @param _velocity New value to be moved in member velocity
 */
void px4_msgs::msg::TrajectoryWaypoint::velocity(px4_msgs::msg::float__3 &&_velocity)
{
m_velocity = std::move(_velocity);
}

/*!
 * @brief This function returns a constant reference to member velocity
 * @return Constant reference to member velocity
 */
const px4_msgs::msg::float__3& px4_msgs::msg::TrajectoryWaypoint::velocity() const
{
    return m_velocity;
}

/*!
 * @brief This function returns a reference to member velocity
 * @return Reference to member velocity
 */
px4_msgs::msg::float__3& px4_msgs::msg::TrajectoryWaypoint::velocity()
{
    return m_velocity;
}
/*!
 * @brief This function copies the value in member acceleration
 * @param _acceleration New value to be copied in member acceleration
 */
void px4_msgs::msg::TrajectoryWaypoint::acceleration(const px4_msgs::msg::float__3 &_acceleration)
{
m_acceleration = _acceleration;
}

/*!
 * @brief This function moves the value in member acceleration
 * @param _acceleration New value to be moved in member acceleration
 */
void px4_msgs::msg::TrajectoryWaypoint::acceleration(px4_msgs::msg::float__3 &&_acceleration)
{
m_acceleration = std::move(_acceleration);
}

/*!
 * @brief This function returns a constant reference to member acceleration
 * @return Constant reference to member acceleration
 */
const px4_msgs::msg::float__3& px4_msgs::msg::TrajectoryWaypoint::acceleration() const
{
    return m_acceleration;
}

/*!
 * @brief This function returns a reference to member acceleration
 * @return Reference to member acceleration
 */
px4_msgs::msg::float__3& px4_msgs::msg::TrajectoryWaypoint::acceleration()
{
    return m_acceleration;
}
/*!
 * @brief This function sets a value in member yaw
 * @param _yaw New value for member yaw
 */
void px4_msgs::msg::TrajectoryWaypoint::yaw(float _yaw)
{
m_yaw = _yaw;
}

/*!
 * @brief This function returns the value of member yaw
 * @return Value of member yaw
 */
float px4_msgs::msg::TrajectoryWaypoint::yaw() const
{
    return m_yaw;
}

/*!
 * @brief This function returns a reference to member yaw
 * @return Reference to member yaw
 */
float& px4_msgs::msg::TrajectoryWaypoint::yaw()
{
    return m_yaw;
}

/*!
 * @brief This function sets a value in member yaw_speed
 * @param _yaw_speed New value for member yaw_speed
 */
void px4_msgs::msg::TrajectoryWaypoint::yaw_speed(float _yaw_speed)
{
m_yaw_speed = _yaw_speed;
}

/*!
 * @brief This function returns the value of member yaw_speed
 * @return Value of member yaw_speed
 */
float px4_msgs::msg::TrajectoryWaypoint::yaw_speed() const
{
    return m_yaw_speed;
}

/*!
 * @brief This function returns a reference to member yaw_speed
 * @return Reference to member yaw_speed
 */
float& px4_msgs::msg::TrajectoryWaypoint::yaw_speed()
{
    return m_yaw_speed;
}

/*!
 * @brief This function sets a value in member point_valid
 * @param _point_valid New value for member point_valid
 */
void px4_msgs::msg::TrajectoryWaypoint::point_valid(bool _point_valid)
{
m_point_valid = _point_valid;
}

/*!
 * @brief This function returns the value of member point_valid
 * @return Value of member point_valid
 */
bool px4_msgs::msg::TrajectoryWaypoint::point_valid() const
{
    return m_point_valid;
}

/*!
 * @brief This function returns a reference to member point_valid
 * @return Reference to member point_valid
 */
bool& px4_msgs::msg::TrajectoryWaypoint::point_valid()
{
    return m_point_valid;
}

/*!
 * @brief This function sets a value in member type
 * @param _type New value for member type
 */
void px4_msgs::msg::TrajectoryWaypoint::type(uint8_t _type)
{
m_type = _type;
}

/*!
 * @brief This function returns the value of member type
 * @return Value of member type
 */
uint8_t px4_msgs::msg::TrajectoryWaypoint::type() const
{
    return m_type;
}

/*!
 * @brief This function returns a reference to member type
 * @return Reference to member type
 */
uint8_t& px4_msgs::msg::TrajectoryWaypoint::type()
{
    return m_type;
}


size_t px4_msgs::msg::TrajectoryWaypoint::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;











    return current_align;
}

bool px4_msgs::msg::TrajectoryWaypoint::isKeyDefined()
{
   return false;
}

void px4_msgs::msg::TrajectoryWaypoint::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
}


