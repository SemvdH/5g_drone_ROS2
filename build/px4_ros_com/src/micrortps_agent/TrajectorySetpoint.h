// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TrajectorySetpoint.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _PX4_MSGS_MSG_TRAJECTORYSETPOINT_H_
#define _PX4_MSGS_MSG_TRAJECTORYSETPOINT_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TrajectorySetpoint_SOURCE)
#define TrajectorySetpoint_DllAPI __declspec( dllexport )
#else
#define TrajectorySetpoint_DllAPI __declspec( dllimport )
#endif // TrajectorySetpoint_SOURCE
#else
#define TrajectorySetpoint_DllAPI
#endif
#else
#define TrajectorySetpoint_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


namespace px4_msgs
{
    namespace msg
    {
        typedef std::array<float, 3> float__3;
        /*!
         * @brief This class represents the structure TrajectorySetpoint defined by the user in the IDL file.
         * @ingroup TRAJECTORYSETPOINT
         */
        class TrajectorySetpoint
        {
        public:

            /*!
             * @brief Default constructor.
             */
            eProsima_user_DllExport TrajectorySetpoint();

            /*!
             * @brief Default destructor.
             */
            eProsima_user_DllExport ~TrajectorySetpoint();

            /*!
             * @brief Copy constructor.
             * @param x Reference to the object px4_msgs::msg::TrajectorySetpoint that will be copied.
             */
            eProsima_user_DllExport TrajectorySetpoint(const TrajectorySetpoint &x);

            /*!
             * @brief Move constructor.
             * @param x Reference to the object px4_msgs::msg::TrajectorySetpoint that will be copied.
             */
            eProsima_user_DllExport TrajectorySetpoint(TrajectorySetpoint &&x);

            /*!
             * @brief Copy assignment.
             * @param x Reference to the object px4_msgs::msg::TrajectorySetpoint that will be copied.
             */
            eProsima_user_DllExport TrajectorySetpoint& operator=(const TrajectorySetpoint &x);

            /*!
             * @brief Move assignment.
             * @param x Reference to the object px4_msgs::msg::TrajectorySetpoint that will be copied.
             */
            eProsima_user_DllExport TrajectorySetpoint& operator=(TrajectorySetpoint &&x);

            /*!
             * @brief This function sets a value in member timestamp
             * @param _timestamp New value for member timestamp
             */
            eProsima_user_DllExport void timestamp(uint64_t _timestamp);

            /*!
             * @brief This function returns the value of member timestamp
             * @return Value of member timestamp
             */
            eProsima_user_DllExport uint64_t timestamp() const;

            /*!
             * @brief This function returns a reference to member timestamp
             * @return Reference to member timestamp
             */
            eProsima_user_DllExport uint64_t& timestamp();

            /*!
             * @brief This function sets a value in member x
             * @param _x New value for member x
             */
            eProsima_user_DllExport void x(float _x);

            /*!
             * @brief This function returns the value of member x
             * @return Value of member x
             */
            eProsima_user_DllExport float x() const;

            /*!
             * @brief This function returns a reference to member x
             * @return Reference to member x
             */
            eProsima_user_DllExport float& x();

            /*!
             * @brief This function sets a value in member y
             * @param _y New value for member y
             */
            eProsima_user_DllExport void y(float _y);

            /*!
             * @brief This function returns the value of member y
             * @return Value of member y
             */
            eProsima_user_DllExport float y() const;

            /*!
             * @brief This function returns a reference to member y
             * @return Reference to member y
             */
            eProsima_user_DllExport float& y();

            /*!
             * @brief This function sets a value in member z
             * @param _z New value for member z
             */
            eProsima_user_DllExport void z(float _z);

            /*!
             * @brief This function returns the value of member z
             * @return Value of member z
             */
            eProsima_user_DllExport float z() const;

            /*!
             * @brief This function returns a reference to member z
             * @return Reference to member z
             */
            eProsima_user_DllExport float& z();

            /*!
             * @brief This function sets a value in member yaw
             * @param _yaw New value for member yaw
             */
            eProsima_user_DllExport void yaw(float _yaw);

            /*!
             * @brief This function returns the value of member yaw
             * @return Value of member yaw
             */
            eProsima_user_DllExport float yaw() const;

            /*!
             * @brief This function returns a reference to member yaw
             * @return Reference to member yaw
             */
            eProsima_user_DllExport float& yaw();

            /*!
             * @brief This function sets a value in member yawspeed
             * @param _yawspeed New value for member yawspeed
             */
            eProsima_user_DllExport void yawspeed(float _yawspeed);

            /*!
             * @brief This function returns the value of member yawspeed
             * @return Value of member yawspeed
             */
            eProsima_user_DllExport float yawspeed() const;

            /*!
             * @brief This function returns a reference to member yawspeed
             * @return Reference to member yawspeed
             */
            eProsima_user_DllExport float& yawspeed();

            /*!
             * @brief This function sets a value in member vx
             * @param _vx New value for member vx
             */
            eProsima_user_DllExport void vx(float _vx);

            /*!
             * @brief This function returns the value of member vx
             * @return Value of member vx
             */
            eProsima_user_DllExport float vx() const;

            /*!
             * @brief This function returns a reference to member vx
             * @return Reference to member vx
             */
            eProsima_user_DllExport float& vx();

            /*!
             * @brief This function sets a value in member vy
             * @param _vy New value for member vy
             */
            eProsima_user_DllExport void vy(float _vy);

            /*!
             * @brief This function returns the value of member vy
             * @return Value of member vy
             */
            eProsima_user_DllExport float vy() const;

            /*!
             * @brief This function returns a reference to member vy
             * @return Reference to member vy
             */
            eProsima_user_DllExport float& vy();

            /*!
             * @brief This function sets a value in member vz
             * @param _vz New value for member vz
             */
            eProsima_user_DllExport void vz(float _vz);

            /*!
             * @brief This function returns the value of member vz
             * @return Value of member vz
             */
            eProsima_user_DllExport float vz() const;

            /*!
             * @brief This function returns a reference to member vz
             * @return Reference to member vz
             */
            eProsima_user_DllExport float& vz();

            /*!
             * @brief This function copies the value in member acceleration
             * @param _acceleration New value to be copied in member acceleration
             */
            eProsima_user_DllExport void acceleration(const px4_msgs::msg::float__3 &_acceleration);

            /*!
             * @brief This function moves the value in member acceleration
             * @param _acceleration New value to be moved in member acceleration
             */
            eProsima_user_DllExport void acceleration(px4_msgs::msg::float__3 &&_acceleration);

            /*!
             * @brief This function returns a constant reference to member acceleration
             * @return Constant reference to member acceleration
             */
            eProsima_user_DllExport const px4_msgs::msg::float__3& acceleration() const;

            /*!
             * @brief This function returns a reference to member acceleration
             * @return Reference to member acceleration
             */
            eProsima_user_DllExport px4_msgs::msg::float__3& acceleration();
            /*!
             * @brief This function copies the value in member jerk
             * @param _jerk New value to be copied in member jerk
             */
            eProsima_user_DllExport void jerk(const px4_msgs::msg::float__3 &_jerk);

            /*!
             * @brief This function moves the value in member jerk
             * @param _jerk New value to be moved in member jerk
             */
            eProsima_user_DllExport void jerk(px4_msgs::msg::float__3 &&_jerk);

            /*!
             * @brief This function returns a constant reference to member jerk
             * @return Constant reference to member jerk
             */
            eProsima_user_DllExport const px4_msgs::msg::float__3& jerk() const;

            /*!
             * @brief This function returns a reference to member jerk
             * @return Reference to member jerk
             */
            eProsima_user_DllExport px4_msgs::msg::float__3& jerk();
            /*!
             * @brief This function copies the value in member thrust
             * @param _thrust New value to be copied in member thrust
             */
            eProsima_user_DllExport void thrust(const px4_msgs::msg::float__3 &_thrust);

            /*!
             * @brief This function moves the value in member thrust
             * @param _thrust New value to be moved in member thrust
             */
            eProsima_user_DllExport void thrust(px4_msgs::msg::float__3 &&_thrust);

            /*!
             * @brief This function returns a constant reference to member thrust
             * @return Constant reference to member thrust
             */
            eProsima_user_DllExport const px4_msgs::msg::float__3& thrust() const;

            /*!
             * @brief This function returns a reference to member thrust
             * @return Reference to member thrust
             */
            eProsima_user_DllExport px4_msgs::msg::float__3& thrust();

            /*!
             * @brief This function returns the maximum serialized size of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function returns the serialized size of a data depending on the buffer alignment.
             * @param data Data which is calculated its serialized size.
             * @param current_alignment Buffer alignment.
             * @return Serialized size.
             */
            eProsima_user_DllExport static size_t getCdrSerializedSize(const px4_msgs::msg::TrajectorySetpoint& data, size_t current_alignment = 0);


            /*!
             * @brief This function serializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

            /*!
             * @brief This function deserializes an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



            /*!
             * @brief This function returns the maximum serialized size of the Key of an object
             * depending on the buffer alignment.
             * @param current_alignment Buffer alignment.
             * @return Maximum serialized size.
             */
            eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

            /*!
             * @brief This function tells you if the Key has been defined for this type
             */
            eProsima_user_DllExport static bool isKeyDefined();

            /*!
             * @brief This function serializes the key members of an object using CDR serialization.
             * @param cdr CDR serialization object.
             */
            eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

        private:
            uint64_t m_timestamp;
            float m_x;
            float m_y;
            float m_z;
            float m_yaw;
            float m_yawspeed;
            float m_vx;
            float m_vy;
            float m_vz;
            px4_msgs::msg::float__3 m_acceleration;
            px4_msgs::msg::float__3 m_jerk;
            px4_msgs::msg::float__3 m_thrust;
        };
    }
}

#endif // _PX4_MSGS_MSG_TRAJECTORYSETPOINT_H_